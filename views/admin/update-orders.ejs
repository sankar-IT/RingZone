<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Orders</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

  <style>
    :root {
      --sidebar-bg: #2c3e50;
      --sidebar-hover: #34495e;
      --topbar-bg: #ffffff;
      --content-bg: #f8f9fa;
      --card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.05);
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--content-bg);
      display: flex;
      min-height: 100vh;
    }

    .sidebar {
      background-color: var(--sidebar-bg);
      width: 250px;
      height: 100vh;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 20px 0;
      box-shadow: 2px 0 10px rgba(0,0,0,0.1);
      position: fixed;
      z-index: 1000;
    }

    .sidebar h2 {
      font-weight: 700;
      font-size: 1.5rem;
      padding: 0 20px 20px;
      margin: 0;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .sidebar .nav-link {
      color: rgba(255,255,255,0.8);
      padding: 10px 20px;
      margin: 5px 0;
      font-weight: 500;
      border-left: 3px solid transparent;
      transition: all 0.3s ease;
    }

    .sidebar .nav-link:hover,
    .sidebar .nav-link.active {
      color: white;
      background-color: var(--sidebar-hover);
      border-left: 3px solid #ffffff;
    }

    .sidebar .nav-link i {
      width: 24px;
      text-align: center;
      margin-right: 10px;
    }

    .main {
      flex: 1;
      margin-left: 250px;
      padding: 20px;
    }

    .topbar {
      height: 60px;
      background-color: var(--topbar-bg);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .content {
      margin-top: 20px;
      padding: 25px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
    }

    .btn-logout {
      background-color: #e74c3c;
      border: none;
      padding: 8px 20px;
      border-radius: 6px;
      font-weight: 600;
      transition: all 0.3s;
    }

    .btn-logout:hover {
      background-color: #c0392b;
      transform: translateY(-1px);
    }

    .container {
      max-width: 1300px;
      margin: 30px auto;
      padding: 0 15px;
    }

    .order-card {
      background: #fff;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 30px;
      box-shadow: 0 0 8px rgba(0,0,0,0.05);
    }

    .order-header {
      padding-bottom: 10px;
      border-bottom: 1px solid #ddd;
      margin-bottom: 20px;
    }

    .order-id {
      font-size: 1.3rem;
      font-weight: 700;
      color: #e74c3c;
    }

    .product-card {
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background: #fff;
    }

    .product-img {
      max-width: 80px;
      max-height: 80px;
      border-radius: 8px;
      object-fit: contain;
    }

    .address-block {
      font-size: 0.9rem;
      color: #555;
    }

    .address-block p {
      margin: 0;
    }

    .status-select {
      font-size: 0.9rem;
    }

    .order-footer {
      text-align: right;
      margin-top: 20px;
    }

    .btn-update {
      padding: 8px 20px;
      font-weight: 600;
    }

    /* Return Request Styles */
    .return-request {
      font-size: 0.85rem;
      background-color: #fffaf0;
      border-left: 3px solid #ffc107;
      padding: 10px;
      margin-top: 10px;
      border-radius: 4px;
    }

    .approve-return, .reject-return {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
    }

    .approve-return:hover {
      background-color: #28a745;
      color: white;
    }

    .reject-return:hover {
      background-color: #dc3545;
      color: white;
    }

    .status-disabled {
      background-color: #f8f9fa;
      cursor: not-allowed;
    }

    @media (max-width: 768px) {
      .product-card .row {
        flex-direction: column;
        gap: 15px;
      }

      .order-footer {
        text-align: center;
      }
    }
  </style>
</head>
<body>

  <div class="sidebar">
    <h2>RingZone</h2>
    <a href="/admin/Dashboard" class="nav-link"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
    <a href="/admin/productlist" class="nav-link"><i class="fas fa-box-open"></i> Products</a>
    <a href="/admin/orders-list" class="nav-link"><i class="fas fa-receipt"></i> Order Lists</a>
    <a href="/admin/users" class="nav-link"><i class="fas fa-users"></i> Users</a>
    <a href="/admin/brands" class="nav-link"><i class="fas fa-briefcase"></i> Brands</a>
    <a href="/admin/sales" class="nav-link"><i class="fas fa-chart-line"></i> Sales Report</a>
    <a href="/admin/Coupons" class="nav-link"><i class="fas fa-tags"></i> Coupons</a>
    <a href="/admin/category" class="nav-link"><i class="fas fa-th-large"></i> Category</a>
    <a href="/admin/Banner" class="nav-link"><i class="fas fa-image"></i> Banner</a>
    <a href="/admin/Offers" class="nav-link"><i class="fas fa-gift"></i> Offers</a>
    <a href="/admin/Settings" class="nav-link"><i class="fas fa-cog"></i> Settings</a>
  </div>
  
  <div class="main">
    <div class="topbar">
      <h1 class="m-0 fs-4 text-dark">Update Orders</h1>
      <a href="/admin/logout" class="btn-logout text-white"><i class="fas fa-sign-out-alt me-2"></i>Logout</a>
    </div>
    
    <a href="/admin/orders-list"><button class="btn btn-secondary" style="margin-top: 10px; margin-left: 20px;">Back</button></a>
    
    <div class="container mt-4">
      <div class="order-card">
        <div class="order-header d-flex justify-content-between align-items-center">
          <div>
            <div class="order-id"><%= order.orderId %></div>
            <small class="text-muted"><i class="fa fa-calendar-alt me-1"></i><%= order.createdOn.toLocaleString() %></small>
          </div>
        </div>

        <% if (order.orderedItems.length > 0) { %>
          <% order.orderedItems.forEach((item, idx) => { %>
            <div class="product-card row align-items-center mb-3">
              <div class="col-md-2 text-center">
                <img src="/<%= item.product.images[0] %>" class="product-img" alt="Product">
              </div>
              <div class="col-md-3">
                <h6 class="mb-1"><%= item.product.productName %></h6>
                <small class="text-muted"><%= item.variant.color %>, <%= item.variant.storage %></small><br>
                <span class="badge bg-secondary">Qty: <%= item.quantity %></span>
              </div>
              <div class="col-md-2">
                <strong>â‚¹<%= item.price %></strong>
              </div>
              <div class="col-md-3 address-block">
                <% if (idx === 0) { %>
                  <p><strong><%= order.address.name %></strong></p>
                  <p><%= order.address.address %>, <%= order.address.place %></p>
                  <p><%= order.address.state %> - <%= order.address.pincode %></p>
                  <p><i class="fa fa-phone me-1"></i><%= order.address.phone %></p>
                <% } %>
              </div>
              <div class="col-md-2">
                <label for="item-status-<%= idx %>" class="form-label fw-bold">Item Status</label>
                <select id="item-status-<%= idx %>" class="form-select mb-2 item-status-select <%= ['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status) ? 'status-disabled' : '' %>"
                        data-order-id="<%= order._id %>" data-item-idx="<%= idx %>" <%= ['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status) ? 'disabled' : '' %>>
                  <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                  <option value="Pending" <%= item.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                  <option value="Confirmed" <%= item.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                  <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                  <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                  <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                  <% if (item.status === 'Return Requested' || item.status === 'Return Approved' || item.status === 'Return Rejected' || item.status === 'Returned') { %>
                    <option value="Returned" <%= item.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                  <% } %>
                </select>
                <% if (!['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status)) { %>
                  <button class="btn btn-sm btn-outline-primary update-item-status-btn"
                          data-order-id="<%= order._id %>"
                          data-item-idx="<%= idx %>">
                    Update Item
                  </button>
                <% } %>

                <% if (item.status === 'Return Requested') { %>
                  <div class="return-request mt-3">
                    <h6 class="fw-bold">Return Request</h6>
                    <p class="mb-1"><strong>Reason:</strong> <%= item.returnReason %></p>
                    <p class="mb-2"><small>Requested: <%= item.returnRequestDate.toLocaleString() %></small></p>
                    <div class="d-flex gap-2">
                      <button class="btn btn-success btn-sm approve-return" 
                              data-order-id="<%= order._id %>"
                              data-item-id="<%= item._id %>"
                              data-product-name="<%= item.product.productName %>">
                        <i class="fas fa-check me-1"></i> Approve
                      </button>
                      <button class="btn btn-danger btn-sm reject-return"
                              data-order-id="<%= order._id %>"
                              data-item-id="<%= item._id %>"
                              data-product-name="<%= item.product.productName %>">
                        <i class="fas fa-times me-1"></i> Reject
                      </button>
                    </div>
                  </div>
                <% } %>
              </div>
            </div>
          <% }) %>
        <% } %>

        <div class="row mt-4">
          <div class="col-md-6">
            <label for="order-status" class="form-label fw-bold">Order Status</label>
            <select id="order-status" class="form-select" data-order-id="<%= order._id %>">
              <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
              <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Confirmed" <%= order.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
              <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
              <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
              <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            </select>
          </div>
          <div class="col-md-6 d-flex align-items-end justify-content-end order-footer">
            <button id="update-order-btn" class="btn btn-primary btn-update" data-order-id="<%= order._id %>">Update Order Status</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Order-wise status update
    document.getElementById('update-order-btn').addEventListener('click', async function(e) {
      e.preventDefault();
      const orderId = this.getAttribute('data-order-id');
      const status = document.getElementById('order-status').value;
      
      try {
        const res = await fetch(`/admin/update-order/${orderId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status })
        });
        
        const data = await res.json();
        
        if (res.ok) {
          Swal.fire({
            title: 'Success!',
            text: 'Order status updated successfully!',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: data.message || 'Failed to update order status.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      } catch (err) {
        Swal.fire({
          title: 'Error!',
          text: 'An error occurred. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    });

    // Item-wise status update
    document.querySelectorAll('.update-item-status-btn').forEach(btn => {
      btn.addEventListener('click', async function(e) {
        e.preventDefault();
        const orderId = this.getAttribute('data-order-id');
        const itemIdx = this.getAttribute('data-item-idx');
        const status = document.getElementById(`item-status-${itemIdx}`).value;
        
        try {
          const res = await fetch(`/admin/update-order-item/${orderId}/${itemIdx}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
          });
          
          const data = await res.json();
          
          if (res.ok) {
            Swal.fire({
              title: 'Success!',
              text: 'Item status updated successfully!',
              icon: 'success',
              confirmButtonText: 'OK'
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Failed to update item status.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } catch (err) {
          Swal.fire({
            title: 'Error!',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      });
    });
    document.querySelectorAll('.approve-return').forEach(btn => {
      btn.addEventListener('click', async function() {
        const orderId = this.dataset.orderId;
        const itemId = this.dataset.itemId;
        const productName = this.dataset.productName;
        
        const { isConfirmed } = await Swal.fire({
          title: 'Approve Return',
          text: `Are you sure you want to approve return for ${productName}?`,
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Yes, approve it!',
          cancelButtonText: 'No, cancel!',
          confirmButtonColor: '#28a745'
        });
        
        if (!isConfirmed) return;
        
        try {
          btn.disabled = true;
          btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';

          const response = await fetch('/admin/approve-return', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ orderId, itemId })
          });

          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            throw new Error(`Server returned HTML instead of JSON: ${text.substring(0, 100)}`);
          }

          const result = await response.json();
          
          if (!response.ok) {
            throw new Error(result.message || `Failed to approve return for ${productName}`);
          }

          await Swal.fire({
            title: 'Success!',
            text: `Return approved successfully for ${productName}`,
            icon: 'success',
            confirmButtonText: 'OK'
          });
          
          window.location.reload();
          
        } catch (error) {
          console.error('Approval error:', error);
          await Swal.fire({
            title: 'Error!',
            text: error.message,
            icon: 'error',
            confirmButtonText: 'OK'
          });
          btn.disabled = false;
          btn.innerHTML = '<i class="fas fa-check me-1"></i> Approve';
        }
      });
    });
    document.querySelectorAll('.reject-return').forEach(btn => {
      btn.addEventListener('click', async function() {
        const orderId = this.dataset.orderId;
        const itemId = this.dataset.itemId;
        const productName = this.dataset.productName;
        
        const { value: adminReason, isConfirmed: isReasonProvided } = await Swal.fire({
          title: 'Rejection Reason',
          input: 'textarea',
          inputLabel: `Please enter rejection reason for ${productName}:`,
          inputPlaceholder: 'Type your reason here...',
          inputAttributes: {
            'aria-label': 'Type your rejection reason here'
          },
          showCancelButton: true,
          confirmButtonText: 'Submit',
          cancelButtonText: 'Cancel',
          inputValidator: (value) => {
            if (!value) {
              return 'You need to write something!';
            }
          }
        });
        
        if (!isReasonProvided || !adminReason) return;
        
        const { isConfirmed } = await Swal.fire({
          title: 'Confirm Rejection',
          text: `Are you sure you want to reject this return for ${productName}?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, reject it!',
          cancelButtonText: 'No, cancel!',
          confirmButtonColor: '#dc3545'
        });
        
        if (!isConfirmed) return;
        
        try {
          btn.disabled = true;
          btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';

          const response = await fetch('/admin/reject-return', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ orderId, itemId, adminReason })
          });

          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            throw new Error(`Server returned HTML instead of JSON: ${text.substring(0, 100)}`);
          }

          const result = await response.json();
          
          if (!response.ok) {
            throw new Error(result.message || `Failed to reject return for ${productName}`);
          }

          await Swal.fire({
            title: 'Success!',
            text: `Return rejected successfully for ${productName}`,
            icon: 'success',
            confirmButtonText: 'OK'
          });
          
          window.location.reload();
          
        } catch (error) {
          console.error('Rejection error:', error);
          await Swal.fire({
            title: 'Error!',
            text: error.message,
            icon: 'error',
            confirmButtonText: 'OK'
          });
          btn.disabled = false;
          btn.innerHTML = '<i class="fas fa-times me-1"></i> Reject';
        }
      });
    });
   
function updateStatusDropdowns() {
  const itemSelects = document.querySelectorAll('.item-status-select');
  const hasReturnedItems = Array.from(itemSelects).some(select =>
    select.classList.contains('status-disabled')
  );
  const orderStatusSelect = document.getElementById('order-status');
  const updateOrderBtn = document.getElementById('update-order-btn');

  // Disable certain options if returned items exist
  if (hasReturnedItems) {
    Array.from(orderStatusSelect.options).forEach(option => {
      if (['Shipped', 'Delivered'].includes(option.value)) {
        option.disabled = true;
      }
    });
  }

  // Check if all items are returned/cancelled
  const allReturned = Array.from(itemSelects).every(select =>
    select.classList.contains('status-disabled')
  );

  if (allReturned) {
    updateOrderBtn.disabled = true;
    updateOrderBtn.title = "All items are Returned or Cancelled. Cannot update order.";
    updateOrderBtn.style.cursor = "not-allowed";
  }
}

document.addEventListener('DOMContentLoaded', updateStatusDropdowns);
  </script>
</body>
</html>