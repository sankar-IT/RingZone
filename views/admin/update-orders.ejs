<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin - Update Order</title>

  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

  <style>
    :root {
      --sidebar-bg: #2c3e50;
      --sidebar-hover: #34495e;
      --topbar-bg: #ffffff;
      --content-bg: #f8f9fa;
      --card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.05);
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--content-bg);
      display: flex;
      min-height: 100vh;
    }

    .sidebar {
      background-color: var(--sidebar-bg);
      width: 250px;
      height: 100vh;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 20px 0;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      z-index: 1000;
    }

    .sidebar h2 {
      font-weight: 700;
      font-size: 1.5rem;
      padding: 0 20px 20px;
      margin: 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .sidebar .nav-link {
      color: rgba(255, 255, 255, 0.8);
      padding: 10px 20px;
      margin: 5px 0;
      font-weight: 500;
      border-left: 3px solid transparent;
      transition: all 0.3s ease;
    }

    .sidebar .nav-link:hover,
    .sidebar .nav-link.active {
      color: white;
      background-color: var(--sidebar-hover);
      border-left: 3px solid #ffffff;
    }

    .sidebar .nav-link i {
      width: 24px;
      text-align: center;
      margin-right: 10px;
    }

    .main {
      flex: 1;
      margin-left: 250px;
      padding: 20px;
    }

    .topbar {
      height: 60px;
      background-color: var(--topbar-bg);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .content {
      margin-top: 20px;
      padding: 25px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
    }

    .btn-logout {
      background-color: #e74c3c;
      border: none;
      padding: 8px 20px;
      border-radius: 6px;
      font-weight: 600;
      transition: all 0.3s;
    }

    .btn-logout:hover {
      background-color: #c0392b;
      transform: translateY(-1px);
    }

    .container {
      max-width: 1300px;
      margin: 30px auto;
      padding: 0 15px;
    }

    .order-card {
      background: #fff;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 30px;
      box-shadow: 0 0 8px rgba(0, 0, 0, 0.05);
    }

    .order-header {
      padding-bottom: 10px;
      border-bottom: 1px solid #ddd;
      margin-bottom: 20px;
    }

    .order-id {
      font-size: 1.3rem;
      font-weight: 700;
      color: #e74c3c;
    }

    .product-card {
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background: #fff;
    }

    .product-img {
      max-width: 80px;
      max-height: 80px;
      border-radius: 8px;
      object-fit: contain;
    }

    .address-block {
      font-size: 0.9rem;
      color: #555;
    }

    .address-block p {
      margin: 0;
    }

    .status-select {
      font-size: 0.9rem;
    }

    .order-footer {
      text-align: right;
      margin-top: 20px;
    }

    .btn-update {
      padding: 8px 20px;
      font-weight: 600;
    }

    /* Return Request Styles */
    .return-request {
      font-size: 0.85rem;
      background-color: #fffaf0;
      border-left: 3px solid #ffc107;
      padding: 10px;
      margin-top: 10px;
      border-radius: 4px;
    }

    .approve-return,
    .reject-return {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
    }

    .approve-return:hover {
      background-color: #28a745;
      color: white;
    }

    .reject-return:hover {
      background-color: #dc3545;
      color: white;
    }

    .status-disabled {
      background-color: #f8f9fa;
      cursor: not-allowed;
    }

    /* New styles */
    .disabled-control {
      background-color: #f8f9fa;
      cursor: not-allowed;
      opacity: 0.7;
    }

    .disabled-btn {
      pointer-events: none;
      opacity: 0.6;
    }

    .status-pending {
      color: #ffc107;
      font-weight: bold;
    }

    @media (max-width: 768px) {
      .product-card .row {
        flex-direction: column;
        gap: 15px;
      }

      .order-footer {
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h2>RingZone</h2>
    <a href="/admin/Dashboard" class="nav-link"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
    <a href="/admin/productlist" class="nav-link"><i class="fas fa-box-open"></i> Products</a>
    <a href="/admin/orders-list" class="nav-link"><i class="fas fa-receipt"></i> Order Lists</a>
    <a href="/admin/users" class="nav-link"><i class="fas fa-users"></i> Users</a>
    <a href="/admin/brands" class="nav-link"><i class="fas fa-briefcase"></i> Brands</a>
    <a href="/admin/sales" class="nav-link"><i class="fas fa-chart-line"></i> Sales Report</a>
    <a href="/admin/Coupons" class="nav-link"><i class="fas fa-tags"></i> Coupons</a>
    <a href="/admin/category" class="nav-link"><i class="fas fa-th-large"></i> Category</a>
  </div>

  <div class="main">
    <div class="topbar">
      <h1 class="m-0 fs-4 text-dark">Update Orders</h1>
      <a href="/admin/logout" class="btn-logout text-white"><i class="fas fa-sign-out-alt me-2"></i>Logout</a>
    </div>

    <a href="/admin/orders-list">
      <button class="btn btn-secondary my-3 ms-3">Back</button>
    </a>

    <div class="container mt-2">
      <div class="order-card">
        <div class="order-header d-flex justify-content-between align-items-center">
          <div>
            <div class="order-id"><%= order.orderId %></div>
            <small class="text-muted"><i class="fa fa-calendar-alt me-1"></i><%= order.createdOn.toLocaleString() %></small>
          </div>
        </div>

        <% if (order.orderedItems.length > 0) { %>
          <% order.orderedItems.forEach((item, idx) => { %>
            <div class="product-card row align-items-center mb-3 gx-3">
              <div class="col-md-2 text-center">
                <img src="/<%= item.product.images[0] %>" class="product-img" alt="Product" />
              </div>
              <div class="col-md-3">
                <h6 class="mb-1"><%= item.product.productName %></h6>
                <small class="text-muted"><%= item.variant.color %>, <%= item.variant.storage %></small><br />
                <span class="badge bg-secondary">Qty: <%= item.quantity %></span>
              </div>
              <div class="col-md-2">
                <strong>â‚¹<%= item.price %></strong>
              </div>
              <div class="col-md-3 address-block">
                <% if (idx === 0) { %>
                  <p><strong><%= order.address.name %></strong></p>
                  <p><%= order.address.address %>, <%= order.address.place %></p>
                  <p><%= order.address.state %> - <%= order.address.pincode %></p>
                  <p><i class="fa fa-phone me-1"></i><%= order.address.phone %></p>
                <% } %>
              </div>
              <div class="col-md-2">
                <label for="item-status-<%= idx %>" class="form-label fw-bold">Item Status</label>
                <select
                  id="item-status-<%= idx %>"
                  class="form-select mb-2 item-status-select
                    <%= ['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status) ? 'status-disabled' : '' %>
                    <%= order.status === 'Pending' ? 'disabled-control' : '' %>"
                  data-order-id="<%= order._id %>"
                  data-item-idx="<%= idx %>"
                  <%= ['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status) ? 'disabled' : '' %>
                  <%= order.status === 'Pending' ? 'disabled' : '' %>
                >
                  <% if (order.status === 'Pending') { %>
                    <option value="Pending" selected class="status-pending">Pending</option>
                  <% } else { %>
                    <% if (!['Confirmed', 'Shipped', 'Delivered', 'Cancelled'].includes(item.status)) { %>
                      <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <% } %>
                    <% if (!['Shipped', 'Delivered', 'Cancelled'].includes(item.status)) { %>
                      <option value="Confirmed" <%= item.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                    <% } %>
                    <% if (!['Delivered', 'Cancelled'].includes(item.status)) { %>
                      <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <% } %>
                    <% if (!['Cancelled'].includes(item.status)) { %>
                      <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                    <% } %>
                    <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                    <% if (['Return Requested', 'Return Approved', 'Return Rejected', 'Returned'].includes(item.status)) { %>
                      <option value="Return Requested" <%= item.status === 'Return Requested' ? 'selected' : '' %>>Return Requested</option>
                      <option value="Return Approved" <%= item.status === 'Return Approved' ? 'selected' : '' %>>Return Approved</option>
                      <option value="Return Rejected" <%= item.status === 'Return Rejected' ? 'selected' : '' %>>Return Rejected</option>
                      <option value="Returned" <%= item.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                    <% } %>
                  <% } %>
                </select>

                <% if (!['Returned', 'Cancelled', 'Return Approved', 'Return Rejected'].includes(item.status) && order.status !== 'Pending') { %>
                  <button
                    class="btn btn-sm btn-outline-primary update-item-status-btn"
                    data-order-id="<%= order._id %>"
                    data-item-idx="<%= idx %>"
                  >
                    Update Item
                  </button>
                <% } %>

                <% if (item.cancellationReason) { %>
                  <div class="text-danger small mt-1"><strong>Cancelled Reason:</strong> <%= item.cancellationReason %></div>
                <% } %>
                <% if (item.adminReturnRejectionReason) { %>
                  <div class="text-warning small mt-1"><strong>Return Rejection Reason:</strong> <%= item.adminReturnRejectionReason %></div>
                <% } %>

                <% if (item.status === 'Return Requested') { %>
                  <div class="return-request mt-3">
                    <h6 class="fw-bold">Return Request</h6>
                    <p class="mb-1"><strong>Reason:</strong> <%= item.returnReason %></p>
                    <p class="mb-2">
                      <small>Requested: <%= item.returnRequestDate.toLocaleString() %></small>
                    </p>
                    <div class="d-flex gap-2">
                      <button
                        class="btn btn-success btn-sm approve-return"
                        data-order-id="<%= order._id %>"
                        data-item-id="<%= item._id %>"
                        data-product-name="<%= item.product.productName %>"
                        <%= order.status === 'Pending' ? 'disabled' : '' %>
                      >
                        <i class="fas fa-check me-1"></i> Approve
                      </button>
                      <button
                        class="btn btn-danger btn-sm reject-return"
                        data-order-id="<%= order._id %>"
                        data-item-id="<%= item._id %>"
                        data-product-name="<%= item.product.productName %>"
                        <%= order.status === 'Pending' ? 'disabled' : '' %>
                      >
                        <i class="fas fa-times me-1"></i> Reject
                      </button>
                    </div>
                  </div>
                <% } %>
              </div>
            </div>
          <% }) %>
        <% } %>

        <% if (order.status !== 'Cancelled' && order.status !== 'Returned') { %>
          <div class="row mt-4">
            <div class="col-md-6">
              <label for="order-status" class="form-label fw-bold">Order Status</label>
              <select
                id="order-status"
                class="form-select <%= order.status === 'Pending' ? 'disabled-control' : '' %>"
                data-order-id="<%= order._id %>"
                <%= order.status === 'Pending' ? 'disabled' : '' %>
              >
                <% if (order.status === 'Pending') { %>
                  <option value="Pending" selected class="status-pending">Pending</option>
                <% } else { %>
                  <% if (!['Confirmed', 'Shipped', 'Delivered', 'Cancelled'].includes(order.status)) { %>
                    <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                  <% } %>
                  <% if (!['Shipped', 'Delivered', 'Cancelled'].includes(order.status)) { %>
                    <option value="Confirmed" <%= order.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                  <% } %>
                  <% if (!['Delivered', 'Cancelled'].includes(order.status)) { %>
                    <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                  <% } %>
                  <% if (!['Cancelled'].includes(order.status)) { %>
                    <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                  <% } %>
                  <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                <% } %>
              </select>

              <% if (order.adminCancellation && order.adminCancellation.reason) { %>
                <small class="text-danger d-block mt-2">
                  <strong>Order Cancelled Reason:</strong> <%= order.adminCancellation.reason %>
                </small>
              <% } %>
            </div>
            <div class="col-md-6 d-flex align-items-end justify-content-end order-footer">
              <button
                id="update-order-btn"
                class="btn btn-primary btn-update <%= order.status === 'Pending' ? 'disabled-btn' : '' %>"
                data-order-id="<%= order._id %>"
                <%= order.status === 'Pending' ? 'disabled' : '' %>
              >
                Update Order Status
              </button>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Disable controls if order is Pending or Cancelled
      const orderStatus = document.querySelector('#order-status').value;
      if (orderStatus === 'Pending' || orderStatus === 'Cancelled') {
        document.querySelectorAll('.item-status-select').forEach(select => (select.disabled = true));
        document.querySelectorAll('.update-item-status-btn').forEach(btn => (btn.disabled = true));
        document.getElementById('update-order-btn').disabled = true;
      }
    });

    // Update order status handler
    document.getElementById('update-order-btn').addEventListener('click', async (e) => {
      e.preventDefault();

      const orderId = e.target.getAttribute('data-order-id');
      const status = document.getElementById('order-status').value;

      let payload = { status };

      if (status === 'Cancelled') {
        const { value: reason, isConfirmed } = await Swal.fire({
          title: 'Order Cancellation Reason',
          input: 'textarea',
          inputLabel: 'Please provide the reason for cancelling the order:',
          inputPlaceholder: 'Type your reason...',
          showCancelButton: true,
          confirmButtonText: 'Submit',
          cancelButtonText: 'Cancel',
          inputValidator: (value) => (!value ? 'Reason is required!' : null)
        });
        if (!isConfirmed || !reason) return;
        payload.cancellationReason = reason;
        payload.cancelledBy = 'Admin';
      }

      const confirmResult = await Swal.fire({
        title: 'Update All Items?',
        text: `Do you want to update all products to "${status}"?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, update all',
        cancelButtonText: 'Cancel',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33'
      });

      if (!confirmResult.isConfirmed) return;

      try {
        const res = await fetch(`/admin/update-order/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        const data = await res.json();

        if (res.ok && data.success) {
          await Swal.fire('Success!', 'Order and all items updated successfully.', 'success');
          window.location.reload();
        } else {
          throw new Error(data.message || 'Failed to update order status.');
        }
      } catch (error) {
        Swal.fire('Error!', error.message, 'error');
      }
    });

    // Update item status buttons
    document.querySelectorAll('.update-item-status-btn').forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        e.preventDefault();

        const orderId = btn.getAttribute('data-order-id');
        const itemIdx = btn.getAttribute('data-item-idx');
        const status = document.getElementById(`item-status-${itemIdx}`).value;

        let payload = { status };

        if (status === 'Cancelled') {
          const { value: reason, isConfirmed } = await Swal.fire({
            title: 'Item Cancellation Reason',
            input: 'textarea',
            inputLabel: 'Please provide the reason for cancelling this item:',
            inputPlaceholder: 'Type your reason...',
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => (!value ? 'Reason is required!' : null)
          });
          if (!isConfirmed || !reason) return;
          payload.cancellationReason = reason;
          payload.cancelledBy = 'Admin';
        }

        if (status === 'Return Rejected') {
          const { value: rejectionReason, isConfirmed } = await Swal.fire({
            title: 'Return Rejection Reason',
            input: 'textarea',
            inputLabel: 'Please provide the reason for rejecting this return:',
            inputPlaceholder: 'Type your reason...',
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => (!value ? 'Reason is required!' : null)
          });
          if (!isConfirmed || !rejectionReason) return;
          payload.adminReturnRejectionReason = rejectionReason;
        }

        try {
          const res = await fetch(`/admin/update-order-item/${orderId}/${itemIdx}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
          });
          const data = await res.json();

          if (res.ok && data.success) {
            await Swal.fire('Success!', 'Item status updated successfully.', 'success');
            window.location.reload();
          } else {
            throw new Error(data.message || 'Failed to update item status.');
          }
        } catch (error) {
          Swal.fire('Error!', error.message, 'error');
        }
      });
    });
    document.querySelectorAll('.approve-return').forEach((btn) => {
  btn.addEventListener('click', async (e) => {
    e.preventDefault();
    const orderId = btn.getAttribute('data-order-id');
    const itemId = btn.getAttribute('data-item-id');
    const productName = btn.getAttribute('data-product-name');

    const confirmResult = await Swal.fire({
      title: `Approve return for "${productName}"?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, approve',
      cancelButtonText: 'Cancel'
    });

    if (!confirmResult.isConfirmed) return;

    try {
      const res = await fetch('/admin/approve-return', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, itemId })
      });
      const data = await res.json();

      if (res.ok && data.success) {
        await Swal.fire('Success!', data.message, 'success');
        window.location.reload();
      } else {
        throw new Error(data.message || 'Failed to approve return.');
      }
    } catch (error) {
      Swal.fire('Error', error.message, 'error');
    }
  });
});

document.querySelectorAll('.reject-return').forEach((btn) => {
  btn.addEventListener('click', async (e) => {
    e.preventDefault();
    const orderId = btn.getAttribute('data-order-id');
    const itemId = btn.getAttribute('data-item-id');
    const productName = btn.getAttribute('data-product-name');

    const { value: adminReason, isConfirmed } = await Swal.fire({
      title: `Reject return for "${productName}"`,
      input: 'textarea',
      inputLabel: 'Please provide reason for rejection:',
      inputPlaceholder: 'Type your reason here...',
      showCancelButton: true,
      confirmButtonText: 'Submit',
      cancelButtonText: 'Cancel',
      inputValidator: (value) => (!value ? 'Reason is required!' : null)
    });

    if (!isConfirmed) return;

    try {
      const res = await fetch('/admin/reject-return', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, itemId, adminReason })
      });
      const data = await res.json();

      if (res.ok && data.success) {
        await Swal.fire('Success!', data.message, 'success');
        window.location.reload();
      } else {
        throw new Error(data.message || 'Failed to reject return.');
      }
    } catch (error) {
      Swal.fire('Error', error.message, 'error');
    }
  });
});

  </script>
</body>
</html>
