<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - Sales Report</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

  <style>
    :root {
      --sidebar-bg: #2c3e50;
      --sidebar-hover: #34495e;
      --topbar-bg: #ffffff;
      --content-bg: #f8f9fa;
      --card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.05);
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--content-bg);
      display: flex;
      min-height: 100vh;
    }
    .sidebar {
      background-color: var(--sidebar-bg);
      width: 250px;
      height: 100vh;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 20px 0;
      box-shadow: 2px 0 10px rgba(0,0,0,0.1);
      position: fixed;
      z-index: 1000;
    }
.pagination .page-item .page-link {
  color: #ff4646;
  border: 1px solid #ff4646;
}

.pagination .page-item.active .page-link {
  background-color: #ff4646;
  border-color: #ff4646;
  color: white;
}

.pagination .page-item .page-link:hover {
  background-color: #ff4646;
  color: white;
  border-color: #ff4646;
}

    .sidebar h2 {
      font-weight: 700;
      font-size: 1.5rem;
      padding: 0 20px 20px;
      margin: 0;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .sidebar .nav-link {
      color: rgba(255,255,255,0.8);
      padding: 10px 20px;
      margin: 5px 0;
      font-weight: 500;
      border-left: 3px solid transparent;
      transition: all 0.3s ease;
    }

    .sidebar .nav-link:hover, 
    .sidebar .nav-link.active {
      color: white;
      background-color: var(--sidebar-hover);
      border-left: 3px solid #ffffff;
    }

    .sidebar .nav-link i {
      width: 24px;
      text-align: center;
      margin-right: 10px;
    }
    .main {
      flex: 1;
      margin-left: 250px;
      padding: 20px;
    }

    .topbar {
      height: 60px;
      background-color: var(--topbar-bg);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .content {
      margin-top: 20px;
      padding: 25px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
    }

    .content h1 {
      margin: 0;
      font-size: 1.75rem;
      font-weight: 700;
      color: #2d2d2d;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
      margin-bottom: 20px;
    }
    .btn-logout {
      background-color: #e74c3c;
      border: none;
      padding: 8px 20px;
      border-radius: 6px;
      font-weight: 600;
      transition: all 0.3s;
    }

    .btn-logout:hover {
      background-color: #c0392b;
      transform: translateY(-1px);
    }
    .report-card {
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .report-card h3 {
      font-size: 24px;
      font-weight: 700;
    }
    .badge.delivered { background-color: #155724; color: #f9fcfa; }
    .badge.processing { background-color: #856404; color: #fafaf9; }
    .badge.cancelled { background-color: #721c24; color: #f3f1f1; }
    .badge.confirmed { background-color: #155724; color: #f9f9f9; }
    .badge.pending { background-color: #6c757d; color: #f1f2f4; }
    .badge.shipped { background-color: #0c5460; color: #fafcfd; }
    .badge.returned{background-color: darkslategrey; color: white;}
  </style>
</head>
<body>
  
  <div class="sidebar">
    <h2>RingZone</h2>
    <a href="/admin/Dashboard" class="nav-link"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
    <a href="/admin/productlist" class="nav-link"><i class="fas fa-box-open"></i> Products</a>
    <a href="/admin/orders-list" class="nav-link"><i class="fas fa-receipt"></i> Order Lists</a>
    <a href="/admin/users" class="nav-link"><i class="fas fa-users"></i> Users</a>
    <a href="/admin/brands" class="nav-link"><i class="fas fa-briefcase"></i> Brands</a>
    <a href="/admin/sales-report" class="nav-link"><i class="fas fa-chart-line"></i> Sales Report</a>
    <a href="/admin/coupon-page" class="nav-link"><i class="fas fa-tags"></i> Coupons</a>
    <a href="/admin/category" class="nav-link"><i class="fas fa-th-large"></i> Category</a>
  </div>

  <div class="main">
    <div class="topbar">
      <h1 class="m-0 fs-4 text-dark">Sales Report</h1>
      <a href="/admin/logout" class="btn-logout text-white"><i class="fas fa-sign-out-alt me-2"></i>Logout</a>
    </div>

    <div class="content">
      <div class="container my-2">
        <div class="card1 p-3 mb-4">
          <form id="filterForm" class="row g-3 align-items-end">
            <div class="col-md-3">
              <label class="form-label fw-semibold text-dark">Report Type</label>
              <select id="reportType" class="form-select">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="custom">Custom Date</option>
              </select>
            </div>
            <div class="col-md-3" id="dateRangeSection" style="display:none;">
              <label class="form-label">From Date</label>
              <input type="date" class="form-control" id="fromDate">
            </div>
            <div class="col-md-3" id="dateRangeSectionTo" style="display:none;">
              <label class="form-label">To Date</label>
              <input type="date" class="form-control" id="toDate">
            </div>
            <div class="col-md-3">
              <button type="button" class="btn btn-primary w-100" id="generateReport">
                <i class="fas fa-chart-line"></i> Generate Report
              </button>
            </div>
          </form>
        </div>
         <div class="row g-4 mb-4">
          <div class="col-md-4">
           <div class="card report-card p-3 d-flex align-items-center flex-row" style="gap: 14px;">
          <i class="fas fa-check-circle fa-2x text-success"></i> 
          <div>
          <p class="text-muted mb-1">Delivered</p>
         <h3 id="salesCount"><%= totalDelivered %></h3>
         </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card report-card p-3 d-flex align-items-center flex-row" style="gap: 14px;">
          <i class="fas fa-undo-alt fa-2x text-warning"></i> 
           <div>
          <p class="text-muted mb-1">Returned</p>
          <h3 id="returnedCount"><%=totalReturns%></h3>
          </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card report-card p-3 d-flex align-items-center flex-row" style="gap: 14px;">
           <i class="fas fa-times-circle fa-2x text-danger"></i> 
           <div>
         <p class="text-muted mb-1">Cancelled</p>
        <h3 id="cancelledCount"><%=totalCancelled%></h3>
       </div>
            </div>
          </div>
        </div>

        <div class="row g-4 mb-4">
          <div class="col-md-4">
            <div class="card report-card p-3 d-flex align-items-center flex-row" style="gap: 14px;">
              <i class="fas fa-money-bill-wave fa-2x text-success"></i>
              <div>
                <p class="text-muted mb-1">Sales Amount</p>
                <h3 id="orderAmount">₹ <%= totalAmount %></h3>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card report-card p-3 d-flex align-items-center flex-row" style="gap: 14px;">
              <i class="fas fa-percent fa-2x text-danger"></i>
              <div>
                <p class="text-muted mb-1">Discount</p>
                <h3 id="discount">₹ <%= totalDiscount %></h3>
              </div>
            </div>
          </div>
        </div>

        <div class="card p-3">
          <div class="d-flex justify-content-between mb-3">
            <h5>Sales Data</h5>
            <div>
              <button class="btn btn-success btn-sm" id="downloadExcel">
                <i class="fas fa-file-excel"></i> Excel
              </button>
              <button class="btn btn-danger btn-sm" id="downloadPDF">
                <i class="fas fa-file-pdf"></i> PDF
              </button>
            </div>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered" id="salesTable">
              <thead class="table-light">
                <tr>
                  <th>No</th>
                  <th>Date</th>
                  <th>Order ID</th>
                  <th>Customer</th>
                  <th>Amount</th>
                  <th>Coupon Deduction</th>
                  <th>Order status</th>
                </tr>
              </thead>
              <tbody>
                <% if (orders && orders.length > 0) { %>
                  <% orders.forEach((order, index) => { %>
                    <tr>
                      <td><%= index + 1 %></td>
                      <td><%= order.invoiceDate ? order.invoiceDate.toLocaleDateString('en-IN') : 'N/A' %></td>
                      <td><%= order.orderId %></td>
                      <td><%= order.address.name %></td>
                      <td>₹<%= order.finalAmount %></td>
                      <td>₹<%= order.coupon ? order.coupon.discountAmount : 0 %></td>
                      <td class="badge <%= order.status.toLowerCase().replace(/\s+/g, '-') %>"><%= order.status %></td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="text-center">No Orders Found</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
         <div style="text-align: center;">
  <nav aria-label="Page navigation" class="mt-3">
    <ul class="pagination" id="pagination" style="display: inline-flex;"></ul>
  </nav>
</div>

          </div>
        </div>
      </div>
    </div>
  </div>

 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.27/jspdf.plugin.autotable.min.js"></script>

<script>
  const ordersData = <%- JSON.stringify(orders) %>;

  const salesCountEl = document.getElementById('salesCount');
  const orderAmountEl = document.getElementById('orderAmount');
  const discountEl = document.getElementById('discount');
  const tableBody = document.querySelector('#salesTable tbody');

  function isExcludedStatus(status) {
    if (!status) return false;
    const s = status.trim().toLowerCase();
    return s === 'cancelled' || s === 'canceled' || s === 'returned';
  }

  function toNumber(v) {
    const n = Number(v);
    return isNaN(n) ? 0 : n;
  }

  function formatINR(num) {
    return '₹' + toNumber(num).toLocaleString('en-IN');
  }

  function renderTable(rows) {
    tableBody.innerHTML = '';
    if (!rows.length) {
      tableBody.innerHTML = `<tr><td colspan="7" class="text-center">No Orders Found</td></tr>`;
      return;
    }

    rows.forEach((order, index) => {
      const dateStr = order.invoiceDate
        ? new Date(order.invoiceDate).toLocaleDateString('en-IN')
        : 'N/A';
      const couponAmt = order.coupon ? toNumber(order.coupon.discountAmount) : 0;
      const finalAmt = toNumber(order.finalAmount);
      const badgeClass = (order.status || '').toLowerCase().replace(/\s+/g, '-');

      const row = `
        <tr>
         <td>${(currentPage - 1) * rowsPerPage + index + 1}</td>
          <td>${dateStr}</td>
          <td>${order.orderId || ''}</td>
          <td>${order.address?.name || ''}</td>
          <td>${formatINR(finalAmt)}</td>
          <td>${formatINR(couponAmt)}</td>
          <td class="badge ${badgeClass}">${order.status || ''}</td>
        </tr>`;
      tableBody.insertAdjacentHTML('beforeend', row);
    });
  }

  function computeTotals(rows) {
    let count = 0;
    let amount = 0;
    let discount = 0;

    rows.forEach(order => {
      if (isExcludedStatus(order.status)) return;
      count += 1;
      amount += toNumber(order.finalAmount);
      discount += toNumber(order.coupon ? order.coupon.discountAmount : 0);
    });

    return { count, amount, discount };
  }

  function updateSummaryCards({ count, amount, discount }) {
    salesCountEl.textContent = count;
    orderAmountEl.textContent = formatINR(amount).replace('₹', '₹ ');
    discountEl.textContent = formatINR(discount).replace('₹', '₹ ');
  }

  document.getElementById('reportType').addEventListener('change', function () {
    const type = this.value;
    const dateFrom = document.getElementById('dateRangeSection');
    const dateTo = document.getElementById('dateRangeSectionTo');
    if (type === 'custom') {
      dateFrom.style.display = 'block';
      dateTo.style.display = 'block';
    } else {
      dateFrom.style.display = 'none';
      dateTo.style.display = 'none';
    }
  });

  function filterOrdersByType(type, fromDate, toDate) {
    const today = new Date();
    return ordersData.filter(order => {
      const orderDate = order.invoiceDate ? new Date(order.invoiceDate) : null;
      if (!orderDate) return false;

      if (type === 'daily') {
        return orderDate.toDateString() === today.toDateString();
      }
      if (type === 'weekly') {
       const startOfWeek = new Date(today);
       const day = startOfWeek.getDay();
       const diffToMonday = day === 0 ? -6 : 1 - day;
       startOfWeek.setDate(today.getDate() + diffToMonday);
       startOfWeek.setHours(0, 0, 0, 0);

        const endOfWeek = new Date(today);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        endOfWeek.setHours(23, 59, 59, 999);
        return orderDate >= startOfWeek && orderDate <= endOfWeek;
      }
      if (type === 'monthly') {
        return orderDate.getMonth() === today.getMonth() &&
               orderDate.getFullYear() === today.getFullYear();
      }
      if (type === 'yearly') {
        return orderDate.getFullYear() === today.getFullYear();
      }
      if (type === 'custom') {
        if (!fromDate || !toDate) return false;
        const start = new Date(fromDate);
        const end = new Date(toDate);
        end.setHours(23, 59, 59, 999);
        return orderDate >= start && orderDate <= end;
      }
      return true;
    });
  }

  let currentPage = 1;
  const rowsPerPage = 5;
  let currentOrders = ordersData;

  function renderPaginatedTable(data, page = 1) {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    const paginatedData = data.slice(start, end);
    renderTable(paginatedData);
  }

function initPagination() {
  const totalPages = Math.ceil(currentOrders.length / rowsPerPage);
  const pagination = document.getElementById('pagination');
  if (!pagination) return;

  pagination.innerHTML = '';
  if (totalPages <= 1) return;

  const groupSize = 5;
  const currentGroup = Math.ceil(currentPage / groupSize);
  const startPage = (currentGroup - 1) * groupSize + 1;
  const endPage = Math.min(currentGroup * groupSize, totalPages);

  const createPageItem = (page, text = null, active = false, disabled = false) => {
    return `
      <li class="page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}">
        <a class="page-link" href="#" data-page="${page}">${text || page}</a>
      </li>`;
  };
  if (startPage > 1) {
    pagination.innerHTML += createPageItem(startPage - 1, '« Prev');
  }

  for (let i = startPage; i <= endPage; i++) {
    pagination.innerHTML += createPageItem(i, i, currentPage === i);
  }
  if (endPage < totalPages) {
    pagination.innerHTML += createPageItem(endPage + 1, 'Next »');
  }

  document.querySelectorAll('#pagination .page-link').forEach(link => {
    link.addEventListener('click', e => {
      e.preventDefault();
      const page = parseInt(link.getAttribute('data-page'));
      if (!isNaN(page) && page >= 1 && page <= totalPages) {
        currentPage = page;
        renderPaginatedTable(currentOrders, currentPage);
        initPagination();
      }
    });
  });
}

  
  document.getElementById('generateReport').addEventListener('click', () => {
    const reportType = document.getElementById('reportType').value;
    const fromDate = document.getElementById('fromDate').value;
    const toDate = document.getElementById('toDate').value;

    currentOrders = filterOrdersByType(reportType, fromDate, toDate);
    currentPage = 1;
    renderPaginatedTable(currentOrders, currentPage);
    updateSummaryCards(computeTotals(currentOrders));
    initPagination();
  });

  document.getElementById('downloadExcel').addEventListener('click', () => {
    const wb = XLSX.utils.table_to_book(document.getElementById('salesTable'), { sheet: 'Sales Report' });
    XLSX.writeFile(wb, 'sales-report.xlsx');
  });

  document.getElementById('downloadPDF').addEventListener('click', () => {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF();

    const reportType = document.getElementById('reportType').value;
    const fromDate = document.getElementById('fromDate').value;
    const toDate = document.getElementById('toDate').value;
    const filteredOrders = filterOrdersByType(reportType, fromDate, toDate);

    let tempTable = document.createElement('table');
    tempTable.innerHTML = document.querySelector('#salesTable thead').outerHTML;

    filteredOrders.forEach((order, index) => {
      const dateStr = order.invoiceDate
        ? new Date(order.invoiceDate).toLocaleDateString('en-IN')
        : 'N/A';
      const couponAmt = order.coupon ? toNumber(order.coupon.discountAmount) : 0;
      const finalAmt = toNumber(order.finalAmount);

      const row = `
        <tr>
          <td>${index + 1}</td>
          <td>${dateStr}</td>
          <td>${order.orderId || ''}</td>
          <td>${order.address?.name || ''}</td>
          <td>₹${finalAmt.toLocaleString('en-IN')}</td>
          <td>₹${couponAmt.toLocaleString('en-IN')}</td>
          <td>${order.status || ''}</td>
        </tr>`;
      tempTable.insertAdjacentHTML('beforeend', row);
    });

    pdf.text('Sales Report', 14, 10);
    pdf.autoTable({ html: tempTable });
    pdf.save('sales-report.pdf');
  });

  window.addEventListener('DOMContentLoaded', () => {
    currentOrders = ordersData;
    renderPaginatedTable(currentOrders, currentPage);
    updateSummaryCards(computeTotals(currentOrders));
    initPagination();
  });
</script>

</body>
</html>
