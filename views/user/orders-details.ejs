<%- include('../../views/partials/user/header') %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
:root {
    --brand: #ff4646;
    --brand-light: #ffecec;
  }

  body {
   margin-top: 180px;
    background-color: #f8f9fa;
    font-family: 'Segoe UI', sans-serif;
  }

  .container {
    max-width: 1300px;
    margin: auto;
  }

  .order-details-container {
    padding: 0 5px 5px;
  }

  .product-item {
    width: auto;
    height: auto;
  }

  .order-summary-card,
  .products-list,
  .price-summary,
  .address-section {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 1px 4px rgba(0,0,0,0.05);
    padding: 20px;
    margin-bottom: 20px;
  }

  .order-summary-card {
    border-left: 4px solid var(--brand);
  }

  .address-header {
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .address-details {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
  }

  .address-field {
    margin-bottom: 8px;
  }

  .address-label {
    font-weight: 500;
    color: #555;
    font-size: 0.9rem;
  }

  .address-value {
    color: #333;
    font-size: 0.95rem;
  }

  .order-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin-bottom: 15px;
  }

  .order-title {
    font-size: 1.4rem;
    font-weight: 700;
    color: var(--brand);
    margin: 0;
  }

  .order-status {
    font-size: 0.8rem;
    font-weight: 600;
    padding: 5px 12px;
    border-radius: 20px;
  }

  .status-processing { background-color: #089ae9; color: #fffffe; border-radius: 20px; width: 100px; text-align: center; }
  .status-shipped { background-color:  #ffc107; color: #f9fafb; border-radius: 20px; width: 100px; text-align: center;  }
  .status-delivered { background-color: #28a745; color: #f2f5f3; border-radius: 20px; width: 100px; text-align: center;  }
  .status-cancelled { background-color: #ff0a1e; color: #f9f5f5; border-radius: 20px; width: 100px; text-align: center;  }
  .status-confirmed { background-color: #0dcaf0; color: #f5f3f4; border-radius: 20px; width: 100px; text-align: center;  }
  .status-pending { background-color: #6c757d; color: #f5f3f4; border-radius: 20px; width: 100px; text-align: center;  }
  .status-returned { background-color:  #6610f2; color: #f5f3f4; border-radius: 20px; width: 100px; text-align: center;  }
  .status-return-requested { background-color:  #198754; color: #f5f3f4; border-radius: 20px; width: 100px; text-align: center;  }
  .status-failed { background-color: #dc3545; color: #fff; }

  .order-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    font-size: 0.9rem;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .meta-label {
    font-weight: 500;
    color: #555;
  }

  .meta-value {
    color: #333;
  }

  .product-item {
    display: grid;
    grid-template-columns: 60px 1fr 1fr 1fr 1fr;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
    gap: 10px;
  }
.bg-warning { background-color: #ffc107; color: #000; }
.bg-success { background-color: #28a745; color: #fff; }
.bg-danger { background-color: #dc3545; color: #fff; }

  .product-item:last-child {
    border-bottom: none;
  }

  .product-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 6px;
    border: 1px solid #ddd;
  }
  .return-btn {
  border: 1px solid #ff4646;
  color: #ff4646;
  background-color: transparent;
  padding: 5px 12px;
  font-size: 0.85rem;
  border-radius: 4px;
  transition: all 0.2s ease-in-out;
}
.return-btn:hover {
  background-color: #ff4646;
  color: white;
}

  .product-info {
    display: flex;
    flex-direction: column;
    width: 100px;
  }

  .product-name {
    font-weight: 500;
    color: #333;
    font-size: 0.95rem;
  }

  .product-variant {
    font-size: 0.8rem;
    color: #666;
  }

  .product-price {
    font-weight: 600;
    font-size: 0.95rem;
    color: #222;
  }

  .action-col {
    text-align: right;
  }

  .cancel-btn {
    border: 1px solid var(--brand);
    color: var(--brand);
    background-color: transparent;
    padding: 5px 12px;
    font-size: 0.85rem;
    border-radius: 4px;
    transition: all 0.2s ease-in-out;
  }

  .cancel-btn:hover {
    background-color: var(--brand);
    color: white;
  }

  .cancel-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .price-row {
    display: flex;
    justify-content: space-between;
    padding: 6px 0;
    font-size: 0.95rem;
  }

  .price-total {
    font-weight: 700;
    color: var(--brand);
  }

  .action-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 10px;
  }

  .invoice-btn,
  .back-btn,
  .retry-payment-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    color: white;
  }
  
  .product-item:hover::after{
    box-shadow: none;
    border: none;
  }

  .invoice-btn {
    background-color: var(--brand);
  }

  .invoice-btn:hover {
    background-color: #e63e3e;
  }

  .back-btn {
    background-color: #6c757d;
  }

  .back-btn:hover {
    background-color: #5a6268;
  }

  .retry-payment-btn {
    background-color: #28a745;
  }

  .retry-payment-btn:hover {
    background-color: #218838;
  }

  @media (max-width: 768px) {
    .address-details {
      grid-template-columns: 1fr;
    }
    
    .product-item {
      grid-template-columns: 1fr;
      text-align: left;
    }

    .action-col {
      text-align: left;
    }

    .action-buttons {
      flex-direction: column;
      align-items: stretch;
    }
  }
  .payment-method {
  margin: 0;
}

.payment-badge {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  font-size: 1rem;
  font-weight: 500;
  padding: 6px 12px;
  border-radius: 20px;
  background-color: #f1f1f1;
  color: #333;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.payment-badge i {
  font-size: 1.1rem;
}

.payment-badge.cod {
  background-color: #e6f4ea;
  color: #2e7d32;
}

.payment-badge.online {
  background-color: #e3f2fd;
  color: #1565c0;
}

</style>

<body>
  <div class="container">
    <div class="order-details-container">
      <div class="order-summary-card">
        <div class="order-header">
          <h1 class="order-title"><%=order.orderId%></h1>
      <h2 class="payment-method">
  <% if (order.paymentMethod === 'cod') { %>
    <span class="payment-badge cod">
      <i class="fas fa-money-bill-wave"></i> COD
    </span>
  <% } else { %>
    <span class="payment-badge online">
      <i class="fas fa-credit-card"></i> Online Payment
    </span>
  <% } %>
</h2>

          <% if (order.paymentStatus !== 'Pending') { %>
            <div class="order-status status-<%= order.status.toLowerCase() %>">
              <%= order.status %>
            </div>
          <% } %>
        </div>
        <div class="order-meta">
          <div class="meta-item">
            <span class="meta-label"><i class="far fa-calendar-alt"></i> Date:</span>
            <span class="meta-value"><%=order.createdOn%></span>
          </div>
        </div>
      </div>
      <% if(order.status === 'Cancelled' && order.adminCancellation && order.adminCancellation.reason) { %>
  <div class="alert alert-danger mt-3">
    <strong>Order Cancelled Reason:</strong> <%= order.adminCancellation.reason %><br>
    <small>Cancelled by: <%= order.adminCancellation.cancelledBy || 'Admin' %></small><br>
    <small>Date: <%= new Date(order.adminCancellation.cancellationDate).toLocaleString() %></small>
  </div>
<% } %>

    
<div class="address-section">
  <div class="address-header">
    <i class="fas fa-map-marker-alt"></i>
    <span>Delivery Address</span>
  </div>
  <div class="address-details">
    <div>
      <div class="address-field">
        <span class="address-label">Name:</span>
        <span class="address-value"><%= order.address.name %></span>
      </div>
      <div class="address-field">
        <span class="address-label">Address:</span>
        <span class="address-value"><%= order.address.address %></span>
      </div>
      <div class="address-field">
        <span class="address-label">City/Town:</span>
        <span class="address-value"><%= order.address.place %></span>
      </div>
    </div>
    <div>
      <div class="address-field">
        <span class="address-label">State:</span>
        <span class="address-value"><%= order.address.state %></span>
      </div>
      <div class="address-field">
        <span class="address-label">Pincode:</span>
        <span class="address-value"><%= order.address.pincode %></span>
      </div>
      <div class="address-field">
        <span class="address-label">Phone:</span>
        <span class="address-value"><%= order.address.phone %></span>
      </div>
    </div>
  </div>
</div>

      <div class="products-list">
        <% if (order.orderedItems.length > 0) { %>
          <% order.orderedItems.forEach(item => { %>
            <div class="product-item">
              <img src="/<%= item.product.images[0] %>" class="product-image" alt="Product Image">
              <div class="product-info">
                <div class="product-name"><%= item.product.productName %></div>
                <div class="product-variant"><%= item.variant.color %>, <%= item.variant.storage %> <span><strong>X<%= item.quantity %></strong></span></div>
                
              </div>
              <div class="product-price">â‚¹<%= item.price %></div>
              
              <% if (order.paymentStatus !== 'Pending') { %>
                <div class="order-status status-<%= (item.status || order.status).toLowerCase() %>">
                  <%= item.status || order.status %>
                </div>
              <% } else { %>
                <div></div> 
              <% } %>
              
              <div class="action-col">
                <% if (order.paymentStatus === 'Pending') { %>
                
                <% } else if (item.status === 'Delivered') { %>
                  <button class="return-btn" 
                    data-order-id="<%= order._id %>" 
                    data-item-id="<%= item._id %>">
                    Return Order
                  </button>
                <% } else if (['Return Requested', 'Return Approved', 'Return Rejected', 'Returned'].includes(item.status)) { %>
                  <% if (item.status === 'Return Requested') { %>
                      <span class="badge bg-warning">Return Requested</span>
                  <% } else if (item.status === 'Return Approved') { %>
                      <span class="badge bg-success">Return Approved</span>
                  <% } else if (item.status === 'Return Rejected') { %>
                      <span class="badge bg-danger">Return Rejected</span>
                  <% } else if (item.status === 'Returned') { %>
                      <span class="badge bg-primary">Returned</span>
                  <% } %>
                <% } else if (item.status === 'Cancelled' || order.status === 'Cancelled') { %>
                  <button class="cancel-btn" disabled>Cancelled</button>
                <% } else if (['Pending', 'Processing', 'Confirmed'].includes(order.status) && !['Returned', 'Return Requested'].includes(item.status)) { %>
                  <button class="cancel-btn" 
                    data-order-id="<%= order._id %>" 
                    data-item-id="<%= item._id %>">
                    Cancel
                  </button>
                <% } else { %>
                  <button class="cancel-btn" disabled>Cannot Cancel</button>
                <% } %>
              </div>
            </div>
          <% }) %>
        <% } %>
      </div>

      <div class="price-summary">
        <div class="price-row">
          <span>Subtotal:</span>
          <span>â‚¹<%= order.totalPrice %></span>
        </div>
        <% if (order.coupon && order.coupon.discountAmount > 0) { %>
          <div class="price-row">
            <% if(order.totalPrice >=10000){ %>
            <span>Discount:</span>
            <span>- â‚¹<%= order.coupon.discountAmount %></span>
            <% } else { %>
            <span>Discount:</span>
            <span>0</span>
            <% } %>
          </div>
         <div class="price-row">
          <span>Shipping:</span>
          <span><%= order.shipping %></span>
        </div>
        <% } %>
        <div class="price-row price-total fw-bold border-top pt-2 mt-2">
          <span>Total:</span>
          <span>â‚¹<%= order.finalAmount %></span>
        </div>
      </div>
  
      <div class="action-buttons">
        <button class="back-btn" onclick="window.history.back()">
          <i class="fas fa-arrow-left me-1"></i> Back
        </button>
        
        <% if (order.paymentStatus === 'Pending') { %>
         <button class="btn btn-primary" id="retryPaymentBtn" data-order-id="<%= order._id  %>">Retry Payment</button>
        <% } else if (
          order.status && 
          (order.status.toLowerCase() === 'confirmed' || order.status.toLowerCase() === 'delivered')
        ) { %>
          <button class="invoice-btn btn-danger"
            onclick="window.location.href='/download-invoice/<%= order._id %>'">
            <i class="fas fa-file-invoice me-1"></i> Invoice
          </button>
        <% } %>
      </div>
    </div>
  </div>

  <div class="modal fade" id="returnModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Return Request</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="returnForm">
            <input type="hidden" id="returnOrderId">
            <input type="hidden" id="returnItemId">
            <div class="mb-3">
              <label class="form-label">Reason for return</label>
              <textarea class="form-control" id="returnReason" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit Request</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
document.addEventListener('DOMContentLoaded', function() {

  const retryBtn = document.getElementById("retryPaymentBtn");
  if (retryBtn) {
    retryBtn.addEventListener("click", async function () {
      const dbOrderId = this.dataset.orderId;
      try {
        const res = await fetch("/retry-payment", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ dbOrderId })
        });
        const data = await res.json();
        if (data.success && data.orderId && data.keyId) {
          const options = {
            key: data.keyId,
            amount: data.amount,
            currency: data.currency,
            name: "RingZone",
            description: "Retry Payment",
            image: "/images/logoicon.png",
            order_id: data.orderId,
            theme: { color: "#ff4646" },
            handler: function (response) {
              fetch("/verify-razorpay-payment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_signature: response.razorpay_signature,
                  order_id: data.dbOrderId 
                })
              })
                .then(res => res.json())
                .then(result => {
                  if (result.success) {
                    location.href = `/payment-success/${data.dbOrderId}`;
                  } else {
                    location.href = `/payment-failure/${data.dbOrderId}`;
                  }
                });
            },
            prefill: {
              name: data.customer.firstname,
              email: data.customer.email,
              contact: data.customer.phone || ""
            },
          };
          const rzp1 = new Razorpay(options);
          rzp1.open();
        } else {
          alert("Retry payment failed: " + (data.message || "Unknown error"));
        }
      } catch (error) {
        alert("Something went wrong.");
      }
    });
  }

  document.querySelectorAll('.cancel-btn:not(:disabled)').forEach(button => {
    button.addEventListener('click', async function() {
      const productName = this.closest('.product-item').querySelector('.product-name').textContent;
      const orderId = this.dataset.orderId;
      const itemId = this.dataset.itemId;
      const result = await Swal.fire({
        title: `Cancel ${productName}?`,
        text: "Are you sure you want to cancel this item?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, cancel it!'
      });
      if (result.isConfirmed) {
        try {
          this.disabled = true;
          this.textContent = 'Cancelled';
          const response = await fetch(`/cancel-item/${orderId}/${itemId}`, {
            method: 'get',
            headers: { 'Content-Type': 'application/json' }
          });
          const data = await response.json();
          if (response.ok && data.success) {
            await Swal.fire({
              icon: 'success',
              title: 'Cancelled!',
              text: data.message || 'Item cancelled successfully',
              timer: 2000,
              showConfirmButton: false
            });
            window.location.reload();
          } else {
            throw new Error(data.message || 'Failed to cancel item');
          }
        } catch (error) {
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message,
          });
          this.disabled = false;
          this.textContent = 'Cancel';
        }
      }
    });
  });

  document.querySelectorAll('.return-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const orderId = this.dataset.orderId;
      const itemId = this.dataset.itemId;
      document.getElementById('returnOrderId').value = orderId;
      document.getElementById('returnItemId').value = itemId;
      const modal = new bootstrap.Modal(document.getElementById('returnModal'));
      modal.show();
    });
  });

  document.getElementById('returnForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const orderId = document.getElementById('returnOrderId').value;
    const itemId = document.getElementById('returnItemId').value;
    const reason = document.getElementById('returnReason').value;
    try {
      const response = await fetch('/request-return', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, itemId, reason })
      });
      const result = await response.json();
      if (response.ok && result.success) {
        Swal.fire({
          icon: 'success',
          title: 'Return Requested!',
          text: 'Your return request has been submitted',
          timer: 2000
        }).then(() => {
          window.location.reload();
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message
      });
    }
  });
});
</script>
</body>
<%- include('../../views/partials/user/footer') %>