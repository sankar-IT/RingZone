<%- include('../../views/partials/user/header') %>

<style>
 
  .product-detail-page .container {
      max-width: 1200px;
      margin-top: 20px;
      margin-bottom: 40px;
      padding: 0 20px;
      font-family: 'Segoe UI', sans-serif;
    }

    .related-products-section {
    margin-top: 60px;
    padding: 0 20px;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .related-products-section h2 {
    font-size: 1.5em;
    margin-bottom: 20px;
    color: #333;
  }
  
  .related-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 20px;
  }
  
  .related-product-card {
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
    background: #fff;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .related-product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  
  .related-product-image {
    width: 100%;
    height: 180px;
    object-fit: contain;
    background: #f9f9f9;
  }
  
  .related-product-info {
    padding: 12px;
  }
  
  .related-product-name {
    font-size: 0.95em;
    margin: 0 0 8px 0;
    color: #333;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .related-product-price {
    color: #1e918b;
    font-weight: bold;
    font-size: 1em;
  }
  
  @media (max-width: 768px) {
    .related-products-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 15px;
    }
    
    .related-product-image {
      height: 150px;
    }
  }
    .product-main {
      display: flex;
      gap: 40px;
      flex-wrap: wrap;
    }

  .related-products-list {
    display: flex;
    gap: 1.5rem;
    flex-wrap: wrap;
    margin-top: 1rem;
  }
  .related-product-card {
    border: 1px solid #eee;
    border-radius: 8px;
    width: 180px;
    text-align: center;
    background: #fafafa;
    transition: box-shadow 0.2s;
  }
  .related-product-card:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  .related-product-image {
    width: 100%;
    height: 120px;
    object-fit: cover;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  .related-product-info {
    padding: 0.5rem;
  }
  .related-product-name {
    font-size: 1rem;
    margin-bottom: 0.25rem;
  }
  .related-product-price {
    color: #388e3c;
    font-weight: bold;
  }



    .gallery {
      flex: 1;
      min-width: 300px;
      display: flex;
      gap: 20px;
    }

    .thumbnails {
      display: flex;
      flex-direction: column;
    }

    .thumbnail {
      width: 60px;
      height: 60px;
      object-fit: cover;
      border: 2px solid transparent;
      cursor: pointer;
      border-radius: 6px;
    }

    .thumbnail.active {
      border-color: #1e918b;
    }

    .main-image-box {
      flex: 1;
    }

    .main-image-box img {
      width: 100%;
      max-height: 450px;
      object-fit: contain;
      border-radius: 8px;
    }

    .details {
      flex: 1;
      min-width: 320px;
      display: flex;
      flex-direction: column;
      /* gap: 16px; */
    }

    .details h1 {
      font-size: 2em;
      margin: 0;
    }

    .short-desc {
      color: #555;
      /* line-height: 1.5; */
    }

    .price {
      font-size: 1.5em;
      font-weight: bold;
      color: #1e918b;
    }

    .out-of-stock {
      color: #ff4646;
      font-weight: bold;
    }

    .ratings {
      color: #ffc107;
      font-size: 0.95em;
    }

    .variant-group {
      margin-bottom: 1rem;
    }
    .old-price{
text-decoration:line-through;
    }

    .variant-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }

    .color-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }

    .color-options input[type="radio"] {
      display: none;
    }

    .color-button {
      padding: 6px 12px;
      border: 1px solid #ccc;
      background: #f9f9f9;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9em;
    }

    .color-options input[type="radio"]:checked + .color-button {
      background: #1e918b;
      color: white;
      border-color: #1e918b;
    }

    .color-options input[type="radio"]:disabled + .color-button {
      opacity: 0.5;
      cursor: not-allowed;
      text-decoration: line-through;
    }

    .storage-select {
      padding: 8px;
      font-size: 1em;
      border-radius: 4px;
      border: 1px solid #ccc;
      width: 100%;
    }

    .storage-select option:disabled {
      color: #ccc;
    }

    .action-buttons {
      display: flex;
      gap: 16px;
      margin-top: 1rem;
    }

    .buy-now,
    .add-to-basket {
      padding: 12px 24px;
      border: none;
      border-radius: 6px;
      font-size: 1em;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .buy-now {
      background-color: #ff4646;
      color: white;
    }

    .buy-now:hover {
      background-color: #07eb88;
    }

    .add-to-basket {
      background-color: #080808;
      color: #ffffff;
    }

    .add-to-basket:hover {
      background-color:  #07eb88;
    }

    .action-buttons button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .delivery {
      font-size: 0.9em;
      color: #666;
      margin-top: 1rem;
    }

    .delivery a {
      font-size: 0.85em;
      color: #007bff;
      text-decoration: underline;
    }

    .similar-products {
      margin-top: 60px;
    }

    .similar-products h2 {
      font-size: 1.5em;
      margin-bottom: 20px;
    }

    .similar-grid {
      display: flex;
      gap: 24px;
      overflow-x: auto;
      padding-bottom: 10px;
    }

    .product-card {
      width: 180px;
      flex-shrink: 0;
      background: #fff;
      text-align: center;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.04);
      padding: 16px;
      transition: transform 0.2s ease;
    }

    .product-card:hover {
      transform: translateY(-5px);
    }

    .product-card img {
      width: 100%;
      height: 150px;
      object-fit: contain;
      border-radius: 6px;
      margin-bottom: 12px;
    }

    .product-card .name {
      font-size: 0.9em;
      color: #333;
      margin: 8px 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .product-card .price {
      font-weight: bold;
      color: #1e918b;
      font-size: 1em;
    }

    .product-not-found {
      text-align: center;
      padding: 40px 0;
    }

    .wishlist-icon {
  position: absolute;
  top: 10px;
  right: 580px;
  z-index: 10;
  background: #fff;
  padding: 6px;
  border-radius: 50%;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  cursor: pointer;
  transition: color 0.2s ease;
}

.wishlist-icon.active i {
  color: #ff4646;
}

.wishlist-icon:hover i {
  color: #ff4646;
}

.magnifier-glass {
  position: absolute;
  border: 3px solid #1e918b;
  border-radius: 50%;
  cursor: none;
  width: 150px;
  height: 150px;
  opacity: 0;
  pointer-events: none;
  box-shadow: 0 4px 8px rgba(30,145,139,0.3);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 200%; 
  z-index: 10;
  transition: opacity 0.2s ease-in-out;
}

.main-image-box {
  position: relative;
}


    @media (max-width: 768px) {
      .product-main {
        flex-direction: column;
        gap: 30px;
      }
      
      .gallery {
        flex-direction: column-reverse;
      }
      
      .thumbnails {
        flex-direction: row;
        order: 1;
        margin-top: 15px;
      }
      
      .action-buttons {
        flex-direction: column;
      }
      
      .buy-now,
      .add-to-basket {
        width: 100%;
      }
    }
</style>

<body>
<main class="product-detail-page">
  <div style="height: 100px; background-color: white;"></div>
  
  <div class="container">
    
    <% if (product && product._id) { %>
      <div class="product-main">
     
        <div class="wishlist-icon" data-product-id="<%= product._id %>">
  <i class="fa fa-heart-o"></i>
</div>

        <div class="gallery">
          <div class="thumbnails" id="thumbnailsContainer">
            <% if (product.variants[0] && product.variants[0].images.length > 0) { %>
              <% product.variants[0].images.forEach((img, index) => { %>
                <img 
                  src="/<%= img %>" 
                  onclick="changeImage(this, '/<%= img %>')" 
                  class="thumbnail <%= index === 0 ? 'active' : '' %>"
                  alt="<%= product.productName %> - Thumbnail <%= index + 1 %>"
                >
              <% }); %>
            <% } else { %>
              <img 
                src="/images/default-product.jpg" 
                onclick="changeImage(this, '/images/default-product.jpg')" 
                class="thumbnail active"
                alt="Default product image"
              >
            <% } %>
          </div>
          <div class="main-image-box">
            <img 
              id="mainImage" 
              src="<%= product.variants[0] && product.variants[0].images[0] ? '/' + product.variants[0].images[0] : '/images/default-product.jpg' %>" 
              alt="<%= product.productName %>"
            >
          </div>
        </div>

        <div class="details">
          <h1><%= product.productName %></h1>
          <p class="short-desc"><%= product.description %></p>

          
<% const firstVariant = product.variants[0]; %>
<% const hasValidDiscount =
     typeof firstVariant.discountPrice === 'number' &&
     firstVariant.discountPrice > 0 &&
     firstVariant.discountPrice < firstVariant.regularPrice; %>

<div class="price-row">
  <p class="price" id="dynamicPrice" data-regular="<%= firstVariant.regularPrice %>" data-discount="<%= hasValidDiscount ? firstVariant.discountPrice : '' %>">
    ₹₹<%= firstVariant.finalPrice.toLocaleString('en-IN') %>
  </p>
  <% if (firstVariant.regularPrice > firstVariant.finalPrice) { %>
    <p class="text-success" style="font-weight:600;">
      You save ₹<%= (firstVariant.regularPrice - firstVariant.finalPrice).toLocaleString('en-IN') %>
    </p>
  <% } %>
  <% if (firstVariant.appliedOffer > 0 && firstVariant.finalPrice < firstVariant.regularPrice) { %>
  <span class="old-price">
    ₹<%= firstVariant.regularPrice.toLocaleString('en-IN') %>
  </span>
<% } %>

</div>
        
          <div id="stockMessageContainer">
            <% if (firstVariant.quantity <= 0) { %>
              <p class="out-of-stock">Currently out of stock</p>
            <% } else { %>
              <p class="in-stock">In stock</p>
            <% } %>
          </div>

          
          <% if (product.variants.some(v => v.color)) { %>
            <div class="variant-group">
              <label>Colour</label>
              <div class="color-options">
                <% product.variants.forEach((variant, index) => { %>
                  <label>
                    <input 
                      type="radio" 
                      name="color" 
                      value="<%= variant.color %>" 
                      <%= index === 0 ? 'checked' : '' %>
                      <%= variant.quantity <= 0 ? 'disabled' : '' %>
                    />
                    <span class="color-button">
                      <%= variant.color %>
                      <%= variant.quantity <= 0 ? ' (Out of Stock)' : '' %>
                    </span>
                  </label>
                <% }); %>
              </div>
            </div>
          <% } %>

          <% if (product.variants.some(v => v.storage)) { %>
            <div class="variant-group">
              <label>Storage</label>
              <select id="storageSelect" class="storage-select">
                <% product.variants.forEach(variant => { %>
                  <option 
                    value='<%- JSON.stringify(variant) %>'
                    <%= variant.quantity <= 0 ? 'disabled' : '' %>
                  >
                    <%= variant.storage %>
                    <%= variant.quantity <= 0 ? ' (Out of Stock)' : '' %>
                  </option>
                <% }); %>
              </select>
            </div>
          <% } %>

        
          <div class="action-buttons">
            <button class="buy-now" <%= firstVariant.quantity <= 0 ? 'disabled' : '' %>>
              Buy Now
            </button>
            <button class="add-to-basket" <%= firstVariant.quantity <= 0 ? 'disabled' : '' %>>
              Add to Basket
            </button>
          </div>

          <div class="delivery">
            <p>Dispatched in 5 - 7 weeks</p>
          </div>
        </div>
      </div>

      
      <% if (similarProducts && similarProducts.length > 0) { %>
        <div class="similar-products">
          <h2>Similar Products</h2>
          <div class="similar-grid">
            <% similarProducts.forEach(prod => { %>
              <a href="/products/<%= prod._id %>" class="product-link">
                <div class="product-card">
                  
                  <img src="/<%= prod.images[0] || 'images/default-product.jpg' %>" alt="<%= prod.productName %>">
                  <h3 class="name"><%= prod.productName %></h3>
                  <p class="price">
                    ₹<%= prod.variants[0].finalPrice.toLocaleString('en-IN') %>
<% if (prod.variants[0].appliedOffer > 0 && prod.variants[0].finalPrice < prod.variants[0].regularPrice) { %>
  <span class="old-price">
    ₹<%= prod.variants[0].regularPrice.toLocaleString('en-IN') %>
  </span>
<% } %>

                  </p>
                </div>
              </a>
            <% }); %>
          </div>
        </div>
      <% } %>
    <% } else { %>
      <div class="product-not-found">
        <h2>Product not found</h2>
        <p>We couldn't find the product you're looking for.</p>
        <a href="/products" class="btn">Browse Products</a>
      </div>
    <% } %>
  </div>
</main>

<script>
const variants = <%- JSON.stringify(product.variants) %>;
let currentMagnifier = null;
function waitForImageLoad(img) {
  return new Promise(resolve => {
    if (img.complete) resolve();
    else img.onload = resolve;
  });
}

async function updateGallery(images) {
  const thumbnailsContainer = document.getElementById('thumbnailsContainer');
  const mainImage = document.getElementById('mainImage');
  thumbnailsContainer.innerHTML = '';
  images.forEach((img, idx) => {
    const thumb = document.createElement('img');
    thumb.src = '/' + img;
    thumb.className = 'thumbnail' + (idx === 0 ? ' active' : '');
    thumb.onclick = function() { changeImage(this, '/' + img); };
    thumb.alt = `Product Thumbnail ${idx+1}`;
    thumbnailsContainer.appendChild(thumb);
  });
  mainImage.src = '/' + images[0];
  await waitForImageLoad(mainImage);

  if (currentMagnifier) currentMagnifier.destroy();
  currentMagnifier = new Magnifier(mainImage, 2);
}

function changeImage(el, src) {
  const mainImage = document.getElementById('mainImage');
  mainImage.src = src;
  waitForImageLoad(mainImage).then(() => {
    if (currentMagnifier) currentMagnifier.destroy();
    currentMagnifier = new Magnifier(mainImage, 2);
    document.querySelectorAll('.thumbnail').forEach(img => img.classList.remove('active'));
    el.classList.add('active');
  });
}

class Magnifier {
  constructor(img, zoom) {
    this.img = img;
    this.zoom = zoom;
    this.container = img.parentElement;
    this.glass = null;
    this.moveHandler = this.moveMagnifier.bind(this);
    this.leaveHandler = this.hideMagnifier.bind(this);
    this.init();
  }
  init() {
    const existingGlass = this.container.querySelector('.magnifier-glass');
    if (existingGlass) existingGlass.remove();

    this.glass = document.createElement('DIV');
    this.glass.setAttribute('class', 'magnifier-glass');
    this.glass.style.left = 0;
    this.glass.style.top = 0;
    this.glass.style.opacity = 0;
    this.glass.style.backgroundImage = `url('${this.img.src}')`;
    this.glass.style.backgroundSize = `${this.img.width * this.zoom}px ${this.img.height * this.zoom}px`;
    this.container.appendChild(this.glass);
  
    this.container.addEventListener('mousemove', this.moveHandler);
    this.container.addEventListener('mouseleave', this.leaveHandler);

    this.container.addEventListener('touchmove', this.moveHandler);
    this.container.addEventListener('touchend', this.leaveHandler);
  }
  moveMagnifier(e) {
    e.preventDefault();
    let clientX, clientY;
    if (e.touches) {
      clientX = e.touches[0].clientX;
      clientY = e.touches[0].clientY;
    } else {
      clientX = e.clientX;
      clientY = e.clientY;
    }
    const bounding = this.img.getBoundingClientRect();
    let x = clientX - bounding.left;
    let y = clientY - bounding.top;
    x -= window.pageXOffset;
    y -= window.pageYOffset;

    const glassW = this.glass.offsetWidth / 2;
    const glassH = this.glass.offsetHeight / 2;
    if (x > this.img.width - (glassW/this.zoom)) x = this.img.width - (glassW / this.zoom);
    if (x < glassW / this.zoom) x = glassW / this.zoom;
    if (y > this.img.height - (glassH/this.zoom)) y = this.img.height - (glassH/this.zoom);
    if (y < glassH/this.zoom) y = glassH/this.zoom;
    this.glass.style.left = (x - glassW) + 'px';
    this.glass.style.top  = (y - glassH) + 'px';
    this.glass.style.opacity = 1;
    this.glass.style.backgroundPosition = `-${(x*this.zoom - glassW)}px -${(y*this.zoom - glassH)}px`;
  }
  hideMagnifier() {
    this.glass.style.opacity = 0;
  }
  destroy() {
    this.container.removeEventListener('mousemove', this.moveHandler);
    this.container.removeEventListener('mouseleave', this.leaveHandler);
    this.container.removeEventListener('touchmove', this.moveHandler);
    this.container.removeEventListener('touchend', this.leaveHandler);
    if (this.glass) this.glass.remove();
  }
}

function updateVariantDetails(variant) {
  const priceDisplay = document.getElementById('dynamicPrice');
  const oldPriceElement = document.querySelector('.old-price');
  priceDisplay.textContent = '₹' + variant.finalPrice.toLocaleString('en-IN');
  if (oldPriceElement) oldPriceElement.remove();
  if (variant.appliedOffer > 0 && variant.finalPrice < variant.regularPrice) {
    const oldPrice = document.createElement('span');
    oldPrice.className = 'old-price';
    oldPrice.textContent = '₹' + variant.regularPrice.toLocaleString('en-IN');
    priceDisplay.parentNode.appendChild(oldPrice);
  }
  updateGallery(variant.images);
  checkStockStatus(variant._id, variant.quantity);
}

function getSelectedVariant() {
  const storageSelect = document.getElementById('storageSelect');
  if (storageSelect) {
    try {
      return JSON.parse(storageSelect.value);
    } catch {
      return variants[0];
    }
  }
  return variants[0];
}

function checkStockStatus(variantId, quantity) {
  const buyNowBtn = document.querySelector('.buy-now');
  const addToBasketBtn = document.querySelector('.add-to-basket');
  const stockMessageContainer = document.getElementById('stockMessageContainer');
  const isOutOfStock = quantity <= 0;

  buyNowBtn.disabled = isOutOfStock;
  addToBasketBtn.disabled = isOutOfStock;
  stockMessageContainer.innerHTML = isOutOfStock 
    ? '<p class="out-of-stock">Currently out of stock</p>' 
    : '<p class="in-stock">In stock</p>';
}

document.addEventListener('DOMContentLoaded', async function() {
  const storageSelect = document.getElementById('storageSelect');
  const colorRadios = document.querySelectorAll('input[name="color"]');

  colorRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      const selectedColor = this.value;
      const filteredVariants = variants.filter(v => v.color === selectedColor);
      if (storageSelect) {
        storageSelect.innerHTML = '';
        filteredVariants.forEach(variant => {
          const option = document.createElement('option');
          option.value = JSON.stringify(variant);
          option.text = variant.storage;
          if (variant.quantity <= 0) option.disabled = true;
          storageSelect.appendChild(option);
        });
      }
      updateVariantDetails(filteredVariants[0]);
    });
  });

  if (storageSelect) {
    storageSelect.addEventListener('change', function() {
      const variant = getSelectedVariant();
      updateVariantDetails(variant);
    });
  }

  const mainImage = document.getElementById('mainImage');
  await waitForImageLoad(mainImage);
  if (currentMagnifier) currentMagnifier.destroy();
  currentMagnifier = new Magnifier(mainImage, 2);


  updateVariantDetails(variants[0]);
});


document.querySelector('.add-to-basket').addEventListener('click', async function() {
  const selectedVariant = getSelectedVariant();
  const quantity = 1;

  this.disabled = true;
  this.textContent = 'Adding...';
  const productId = '<%= product._id %>';

  try {
    const response = await fetch('/user-cart', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        productId: '<%= product._id %>',
        variantId: selectedVariant._id,
        quantity: quantity
      })
    });

    const result = await response.json();
    if (result.success) {
 
      const storageKey = 'wishlistProductIds';
      let ids = JSON.parse(localStorage.getItem(storageKey) || '[]');
      ids = ids.filter(id => id !== productId);
      localStorage.setItem(storageKey, JSON.stringify(ids));  
      const cartCountElement = document.querySelector('.fa-shopping-cart + .cart-count');
      if (cartCountElement) cartCountElement.textContent = result.cartCount;
      Swal.fire({ icon: 'success', title: result.message || 'Added to Cart', timer: 1500 });
    } else {
      Swal.fire({ icon: 'error', title: result.message || 'Error occurred', timer: 1500 });
    }
  } catch (error) {
    Swal.fire({ icon: 'error', title: 'Failed to Add', text: 'Error adding to cart' });
  } finally {
    this.disabled = false;
    this.textContent = 'Add to Basket';
  }
});


document.addEventListener('DOMContentLoaded', function () {
  const storageKey = 'wishlistProductIds';
  function getWishlist() {
    return JSON.parse(localStorage.getItem(storageKey) || '[]');
  }
  function setWishlist(ids) {
    localStorage.setItem(storageKey, JSON.stringify(ids));
  }
  async function updateWishlistServer(productId, isAdding) {
    try {
      await fetch('/wishlist/toggle', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId, action: isAdding ? 'add' : 'remove' })
      });
    } catch (err) {
      console.error('Wishlist update failed', err);
    }
  }
  const wishlist = getWishlist();
  const icon = document.querySelector('.wishlist-icon');
  if (icon) {
    const productId = icon.dataset.productId;
    const heartIcon = icon.querySelector('i');
    if (wishlist.includes(productId)) {
      icon.classList.add('active');
      heartIcon.classList.remove('fa-heart-o');
      heartIcon.classList.add('fa-heart');
    }
    icon.addEventListener('click', async function (event) {
      event.preventDefault();
      icon.classList.toggle('active');
      let ids = getWishlist();
      const isAdding = icon.classList.contains('active');
      if (isAdding) {
        heartIcon.classList.remove('fa-heart-o');
        heartIcon.classList.add('fa-heart');
        if (!ids.includes(productId)) ids.push(productId);
      } else {
        heartIcon.classList.remove('fa-heart');
        heartIcon.classList.add('fa-heart-o');
        ids = ids.filter(id => id !== productId);
      }
      setWishlist(ids);
      await updateWishlistServer(productId, isAdding);
    });
  }
});
</script>

<%- include('../../views/partials/user/footer') %>
