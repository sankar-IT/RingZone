<%- include('../../views/partials/user/header') %>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Segoe UI', sans-serif;
            margin-top: 140px;
        }

        .step-nav span {
            padding: 8px 14px;
            border-radius: 10px;
            margin-right: 10px;
            font-weight: 500;
            font-size: 15px;
            background-color: #eee;
            transition: all 0.3s ease-in-out;
        }

        .step-nav .active {
            background-color: #ff4646;
            color: #fff;
            box-shadow: 0 3px 8px rgba(255, 70, 70, 0.3);
        }

        .cart-box {
            background: #fff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }

        .btn-red {
            background-color: #ff4646;
            color: white;
            border: none;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .btn-red:hover {
            background-color: #e63e3e;
        }

        .payment-box {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 0 10px rgba(0,0,0,0.07);
            transition: box-shadow 0.3s ease-in-out;
        }

        .payment-box:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .form-check-label i {
            margin-right: 8px;
            color: #ff4646;
        }

        @media (max-width: 768px) {
            .step-nav span {
                font-size: 14px;
                margin-right: 5px;
                padding: 6px 10px;
            }
        }
        
        .wallet-balance {
            font-size: 14px;
            color: #28a745;
            font-weight: 500;
            margin-left: 30px;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .loading-content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
        }
    </style>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-content">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Processing your request...</p>
        </div>
    </div>

    <div class="container my-5">
        <div class="mb-4 text-center step-nav">
            <a href="/user-cart"><span>Cart</span></a>
            <a href="/checkout"><span>Checkout</span></a>
            <span class="active">Payment</span>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="payment-box mb-4">
                    <h5 class="mb-4">Choose Your Payment Method</h5>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="payment" id="cod" checked>
                        <label class="form-check-label" for="cod">
                            <i class="fas fa-money-bill-wave"></i> Cash on Delivery
                        </label>
                    </div>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="payment" id="card">
                        <label class="form-check-label" for="card">
                            <i class="fas fa-credit-card"></i> Debit / Credit Card
                        </label>
                    </div>

 <div class="form-check mb-3">
  <input class="form-check-input" type="radio" name="payment" id="wallet">
  <label class="form-check-label" for="wallet">
      <i class="fas fa-wallet"></i> Wallet 
      <span class="wallet-balance" id="walletBalanceDisplay">Balance: ₹<%= walletBalance %></span>
  </label>
</div>

                   
                </div>
            </div>

            <div class="col-md-4">
                <div class="cart-box">
                    <h5 class="mb-3">Order summary</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal</span><span id="subtotal">₹<%= orderSummary.subtotal %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Discount</span><span id="discountValue">₹<%= orderSummary.discount %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipment Cost</span><span id="shipment">₹<%= orderSummary.shipment %></span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between fw-bold mb-3">
                        <span>Grand Total</span><span id="grandTotal">₹<%= orderSummary.grandTotal %></span>
                    </div>

                    <button id="checkoutBtn" class="btn btn-success w-100">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="checkoutSpinner"></span>
                        <span id="checkoutText">Place secure order</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        
        const razorpayKey = "rzp_test_your_key_here";
        const spinner = document.getElementById('checkoutSpinner');
        const loadingOverlay = document.getElementById('loadingOverlay');
        let walletBalance = 0;
        let isProcessing = false;

      
        function showLoading() {
            loadingOverlay.style.display = 'flex';
        }

        function hideLoading() {
            loadingOverlay.style.display = 'none';
        }

        function resetBtn() {
            spinner.classList.add('d-none');
            const btnText = document.getElementById('checkoutText');
            btnText.textContent = 'Place secure order';
            const btn = document.getElementById('checkoutBtn');
            btn.disabled = false;
            isProcessing = false;
        }

        function disableBtn() {
            spinner.classList.remove('d-none');
            const btnText = document.getElementById('checkoutText');
            btnText.textContent = 'Processing...';
            const btn = document.getElementById('checkoutBtn');
            btn.disabled = true;
            isProcessing = true;
        }

      
        function forceRedirect(url, delay = 0) {
            setTimeout(() => {
                hideLoading();
               
                try {
                    window.location.replace(url);
                } catch (e) {
                    console.error('Replace failed, trying assign:', e);
                    try {
                        window.location.assign(url);
                    } catch (e2) {
                        console.error('Assign failed, trying href:', e2);
                        window.location.href = url;
                    }
                }
                
                setTimeout(() => {
                    if (window.location.pathname === '/payment') {
                        window.location.reload();
                    }
                }, 3000);
            }, delay);
        }

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/wallet/balance');
                const data = await response.json();
                if (response.ok) {
                    walletBalance = data.balance;
                    document.getElementById('walletBalanceDisplay').textContent = `(Balance: ₹${walletBalance.toFixed(2)})`;
                }
            } catch (error) {
                console.error('Error fetching wallet balance:', error);
                document.getElementById('walletBalanceDisplay').textContent = '(Balance unavailable)';
            }
        });

        document.getElementById('checkoutBtn').addEventListener('click', async () => {
            if (isProcessing) {
                return;
            }

            try {
                disableBtn();
                showLoading();

                const selectedPaymentMethod = document.querySelector('input[name="payment"]:checked')?.id;
                const grandTotal = parseInt(
                    document.getElementById('grandTotal').textContent.replace(/[₹,]/g, '')
                );
                if (selectedPaymentMethod === 'card') {
                    await handleCardPayment(grandTotal);
                } else if (selectedPaymentMethod === 'wallet') {
                    await handleWalletPayment(grandTotal);
                } else {
                    await handleCODPayment();
                }
            } catch (err) {
                console.error("Checkout error:", err);
                hideLoading();
                Swal.fire('Error', err.message || 'Something went wrong during checkout.', 'error');
                resetBtn();
            }
        });

        async function handleCardPayment(grandTotal) {
            try {
                const orderRes = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ finalAmount: grandTotal }),
                });

                const data = await orderRes.json();

                if (!orderRes.ok || !data.success) {
                    throw new Error(data.message || 'Failed to create Razorpay order.');
                }

                hideLoading();

                const options = {
                    key: data.keyId,
                    amount: data.amount,
                    currency: data.currency,
                    order_id: data.orderId,
                    name: "RingZone",
                    description: "Payment for order",
                    image: "/images/logoicon.png",
                    prefill: {
                        name: data.customer?.name || '',
                        email: data.customer?.email || '',
                        contact: data.customer?.phone || '',
                    },
                    theme: { color: "#ff4646" },
                    handler: async function (response) {
                        showLoading();
                        
                        try {
                            const verifyRes = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    order_id: data.dbOrderId,
                                }),
                            });

                            const verifyData = await verifyRes.json();

                            if (verifyRes.ok && verifyData.redirectUrl) {
                                window.removeEventListener('beforeunload', beforeUnloadHandler);
                                isProcessing = false;
                                forceRedirect(verifyData.redirectUrl, 500);
                            } else {
                                forceRedirect(`/payment-failure/${data.orderId}`, 500);
                            }
                        } catch (err) {
                            console.error("Error verifying payment:", err);
                            forceRedirect(`/payment-failure/${data.orderId}`, 500);
                        }
                    },
                    modal: {
                        ondismiss: function () {
                            resetBtn();
                            forceRedirect(`/payment-failure/${data.orderId}`, 1000);
                        },
                    },
                };

                const rzp = new Razorpay(options);
                
                rzp.on('payment.failed', function (response) {
                    console.error("Payment Failed:", response.error);
                    resetBtn();
                    forceRedirect(`/payment-failure/${data.orderId}`, 1000);
                });
                
                rzp.open();

            } catch (error) {
                console.error('Card payment error:', error);
                throw error;
            }
        }


        async function handleWalletPayment(grandTotal) {
            try {
                
                if (walletBalance < grandTotal) {
                    hideLoading();
                    const result = await Swal.fire({
                        title: 'Insufficient Balance',
                        text: `Your wallet balance (₹${walletBalance.toFixed(2)}) is less than the order total (₹${grandTotal}). Would you like to add money to your wallet?`,
                        icon: 'warning',
                        showCancelButton: true,
                        cancelButtonText: 'Cancel',
                        confirmButtonText: 'Add Money'
                    });

                    if (result.isConfirmed) {
                        forceRedirect('/wallet');
                    } else {
                        resetBtn();
                    }
                    return;
                }

                const response = await fetch('/place-order/wallet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                
                if (result.success) {
                    forceRedirect(result.redirectUrl || '/order-placed', 500);
                } else {
                    hideLoading();
                    Swal.fire('Oops!', result.message || 'Payment failed', 'error');
                    resetBtn();
                }

            } catch (error) {
                console.error('Wallet payment error:', error);
                throw error;
            }
        }

        async function handleCODPayment() {
            try {
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                
                if (result.success) {
                    window.removeEventListener('beforeunload', beforeUnloadHandler);
                    isProcessing = false;
                    forceRedirect(result.redirectUrl || '/order-placed', 500);
                } else {
                    hideLoading();
                    Swal.fire('Oops!', result.message || 'Cart is empty.', 'warning');
                    resetBtn();
                }

            } catch (error) {
                console.error('COD payment error:', error);
                throw error;
            }
        }

        // function beforeUnloadHandler(e) {
        //     if (isProcessing) {
        //         e.preventDefault();
        //         e.returnValue = 'Payment is being processed. Are you sure you want to leave?';
        //     }
        // }
        // window.addEventListener('beforeunload', beforeUnloadHandler);
    </script>
</body>
<%- include('../../views/partials/user/footer') %>