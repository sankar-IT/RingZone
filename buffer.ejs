<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Product</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100vh;
      overflow: hidden;
      font-family: 'Inter', sans-serif;
      background-color: #f5f5f5;
    }

    .wrapper {
      display: flex;
      height: 100vh;
      overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
      width: 250px;
      background-color: #352c2c;
      color: white;
      padding: 30px 20px;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      flex-shrink: 0;
    }

    .sidebar h2 {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 30px;
    }

    .sidebar a {
      color: white;
      text-decoration: none;
      display: block;
      margin: 8px 0;
      padding: 8px 12px;
      border-radius: 8px;
      transition: background 0.3s;
      font-weight: 500;
    }

    .sidebar a:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    /* Main area */
    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .topbar {
      background-color: #f7f4f4;
      padding: 16px 30px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 1;
      flex-shrink: 0;
    }

    .content-area {
      flex: 1;
      overflow-y: auto;
      padding: 30px;
    }

    .card-body {
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    }

    /* Image preview styling */
    .img-preview {
      max-width: 200px;
      max-height: 200px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      display: none;
    }

    /* Cropper container styling */
    .image-cropper {
      margin-top: 15px;
      padding: 10px;
      border: 1px solid #eee;
      border-radius: 4px;
      background: #f9f9f9;
      display: none;
    }

    /* Thumbnail container */
    .thumbnails-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 10px;
    }

    .thumbnail {
      position: relative;
      width: 100px;
      height: 100px;
    }

    .thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 4px;
    }

    .remove-thumbnail {
      position: absolute;
      top: -5px;
      right: -5px;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      font-size: 12px;
      cursor: pointer;
    }

    .error-message {
      color: red;
      font-size: 0.8rem;
      margin-top: 0.25rem;
      display: none;
    }
  </style>
</head>
<body>
  <div class="wrapper">
    <!-- Sidebar -->
    <div class="sidebar bg-dark">
      <h2>RingZone</h2>
      <a href="/admin/Dashboard"><i class="fas fa-tachometer-alt me-2"></i> Dashboard</a>
      <a href="/admin/product-add"><i class="fas fa-box-open me-2"></i> Products</a>
      <a href="/admin/order"><i class="fas fa-receipt me-2"></i> Order Lists</a>
      <a href="/admin/users"><i class="fas fa-users me-2"></i> Users</a>
      <a href="/admin/brands"><i class="fas fa-briefcase me-2"></i> Brands</a>
      <a href="/admin/sales"><i class="fas fa-chart-line me-2"></i> Sales Report</a>
      <a href="/admin/Coupons"><i class="fas fa-tags me-2"></i> Coupons</a>
      <a href="/admin/category"><i class="fas fa-th-large me-2"></i> Category</a>
      <a href="/admin/Banner"><i class="fas fa-image me-2"></i> Banner</a>
      <a href="/admin/Offers"><i class="fas fa-gift me-2"></i> Offers</a>
      <a href="/admin/Settings"><i class="fas fa-cog me-2"></i> Settings</a>
    </div>

    <!-- Main content -->
    <div class="main">
      <!-- Topbar -->
      <div class="topbar">
        <h1 class="text-dark m-0">Add Product</h1>
        <a href="/admin/logout" class="btn btn-danger">Logout</a>
      </div>

      <!-- Scrollable content area -->
      <div class="content-area">
        <!-- Begin Product Form Section -->
        <section class="content-main">
          <div class="row">
            <div class="col-12 col-lg-9">
              <div class="content-header mb-4"></div>
              <div class="card mb-4">
                <div class="card-body">
                  <form id="productForm" method="post" action="/admin/addProducts" enctype="multipart/form-data">
                    <div class="mb-4">
                      <label for="product_name" class="form-label">Product Name</label>
                      <input type="text" name="productName" class="form-control" id="product_name" placeholder="Type here">
                      <div id="productName-error" class="error-message"></div>
                    </div>

                    <div class="mb-4">
                      <label class="form-label">Brand</label>
                      <select class="form-select" name="brand">
                        <option value="">Select Brand</option>
                        <%for(let i=0;i<brand.length;i++){%>
                          <option value="<%=brand[i].brandName %>">
                            <%=brand[i].brandName%>
                          </option>
                        <%}%>
                      </select>
                      <div id="brand-error" class="error-message"></div>
                    </div>

                    <div class="mb-4">
                      <label class="form-label">Full description</label>
                      <textarea class="form-control" rows="4" name="description" placeholder="Type here"></textarea>
                      <div id="description-error" class="error-message"></div>
                    </div>

                    <div class="row">
                      <div class="col-lg-4 mb-4">
                        <label class="form-label">Regular Price</label>
                        <input type="text" class="form-control" name="regularPrice" placeholder="$">
                        <div id="regularPrice-error" class="error-message"></div>
                      </div>
                      <div class="col-lg-4 mb-4">
                        <label class="form-label">Sale Price</label>
                        <input type="text" class="form-control" name="salePrice" placeholder="$">
                        <div id="salePrice-error" class="error-message"></div>
                      </div>
                      <div class="col-lg-4 mb-4">
                        <label class="form-label">Quantity</label>
                        <input type="text" class="form-control" name="quantity">
                        <div id="quantity-error" class="error-message"></div>
                      </div>
                    </div>

                    <div class="mb-4">
                      <label class="form-label">Color</label>
                      <input type="text" class="form-control" name="color">
                      <div id="color-error" class="error-message"></div>
                    </div>

                    <div class="mb-4">
                      <label class="form-label">Category</label>
                      <select class="form-select" name="category">
                        <% for(let i = 0; i < cat.length; i++) { %>
                          <option value="<%= cat[i].name %>">
                            <%= cat[i].name %>
                          </option>
                        <% } %>
                      </select>
                      <div id="category-error" class="error-message"></div>
                    </div>

                    <div class="card mb-2">
                      <div class="card-header">
                        <h4>Product Images</h4>
                      </div>
                      
                      <!-- Image 1 -->
                      <div class="row mt-3">
                        <div class="card-body align-items-center">
                          <div id="addedImagesContainer1" class="thumbnails-container"></div>
                          <img src="" alt="" id="imgView1" class="img-preview">
                          <input class="form-control" type="file" name="images" id="input1" 
                                 accept="image/*" onchange="viewImage1(event); viewImage(event, 1)">
                          <div class="image-cropper" id="cropperContainer1">
                            <img src="" id="croppedImg1" alt="" style="max-width: 100%; margin-bottom: 10px;">
                            <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save Cropped Image</button>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Image 2 -->
                      <div class="row mt-3">
                        <div class="card-body align-items-center">
                          <div id="addedImagesContainer2" class="thumbnails-container"></div>
                          <img src="" alt="" id="imgView2" class="img-preview">
                          <input class="form-control" type="file" name="images" id="input2" 
                                 accept="image/*" onchange="viewImage2(event); viewImage(event, 2)">
                          <div class="image-cropper" id="cropperContainer2">
                            <img src="" id="croppedImg2" alt="" style="max-width: 100%; margin-bottom: 10px;">
                            <button type="button" id="saveButton2" class="btn btn-sm btn-primary">Save Cropped Image</button>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Image 3 -->
                      <div class="row mt-3">
                        <div class="card-body align-items-center">
                          <div id="addedImagesContainer3" class="thumbnails-container"></div>
                          <img src="" alt="" id="imgView3" class="img-preview">
                          <input class="form-control" type="file" name="images" id="input3" 
                                 accept="image/*" onchange="viewImage3(event); viewImage(event, 3)">
                          <div class="image-cropper" id="cropperContainer3">
                            <img src="" id="croppedImg3" alt="" style="max-width: 100%; margin-bottom: 10px;">
                            <button type="button" id="saveButton3" class="btn btn-sm btn-primary">Save Cropped Image</button>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Image 4 -->
                      <div class="row mt-3">
                        <div class="card-body align-items-center">
                          <div id="addedImagesContainer4" class="thumbnails-container"></div>
                          <img src="" alt="" id="imgView4" class="img-preview">
                          <input class="form-control" type="file" name="images" id="input4" 
                                 accept="image/*" onchange="viewImage4(event); viewImage(event, 4)">
                          <div class="image-cropper" id="cropperContainer4">
                            <img src="" id="croppedImg4" alt="" style="max-width: 100%; margin-bottom: 10px;">
                            <button type="button" id="saveButton4" class="btn btn-sm btn-primary">Save Cropped Image</button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="mt-4">
                      <button type="submit" class="btn btn-primary">Publish Product</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script>
       const croppers = {};
    const originalImages = {}; // To store original image data

    // Image preview functions
    function viewImage1(event) {
      if (event.target.files && event.target.files[0]) {
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0]);
        document.getElementById('imgView1').style.display = 'block';
        handleFileSelect(event, 1);
      }
    }

    function viewImage2(event) {
      if (event.target.files && event.target.files[0]) {
        document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0]);
        document.getElementById('imgView2').style.display = 'block';
        handleFileSelect(event, 2);
      }
    }

    function viewImage3(event) {
      if (event.target.files && event.target.files[0]) {
        document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0]);
        document.getElementById('imgView3').style.display = 'block';
        handleFileSelect(event, 3);
      }
    }

    function viewImage4(event) {
      if (event.target.files && event.target.files[0]) {
        document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0]);
        document.getElementById('imgView4').style.display = 'block';
        handleFileSelect(event, 4);
      }
    }

    // Cropper functionality
    function viewImage(event, index) {
      const input = event.target;
      if (!input.files || !input.files[0]) return;

      const reader = new FileReader();
      
      reader.onload = function(e) {
        const previewId = 'imgView' + index;
        const previewElement = document.getElementById(previewId);
        
        // Store original image data
        originalImages[index] = e.target.result;
        previewElement.src = originalImages[index];
        previewElement.style.display = 'block';

        // Destroy previous cropper if exists
        if (croppers[index]) {
          croppers[index].destroy();
        }

        // Initialize new cropper
        croppers[index] = new Cropper(previewElement, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true,
          guides: true,
          background: false
        });

        // Show cropper container
        document.getElementById('cropperContainer' + index).style.display = 'flex';
      };
      
      reader.readAsDataURL(input.files[0]);
    }

    // Save cropped images
    function setupSaveButtons() {
      for (let i = 1; i <= 4; i++) {
        document.getElementById('saveButton' + i).addEventListener('click', function() {
          saveCroppedImage(i);
        });
      }
    }

    function saveCroppedImage(index) {
      if (croppers[index]) {
        const croppedCanvas = croppers[index].getCroppedCanvas();
        const croppedImage = document.getElementById('croppedImg' + index);
        croppedImage.src = croppedCanvas.toDataURL('image/jpeg');

        // Convert canvas to blob and update file input
        croppedCanvas.toBlob((blob) => {
          const file = new File([blob], `cropped-image-${index}.jpg`, {type: 'image/jpeg'});
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          document.getElementById('input' + index).files = dataTransfer.files;
        }, 'image/jpeg', 0.9);

        // Hide cropper container but keep the preview
        document.getElementById('cropperContainer' + index).style.display = 'none';
        
        // Restore the original preview image
        const previewId = 'imgView' + index;
        const previewElement = document.getElementById(previewId);
        previewElement.src = originalImages[index];
        previewElement.style.display = 'block';
        
        // Update the thumbnail
        updateThumbnail(index, croppedCanvas.toDataURL('image/jpeg'));
      }
    }

    // Update thumbnail with cropped image
    function updateThumbnail(index, imageSrc) {
      const container = document.getElementById('addedImagesContainer' + index);
      container.innerHTML = '';
      
      if (imageSrc) {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'thumbnail';
        
        const img = document.createElement('img');
        img.src = imageSrc;
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-thumbnail';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = function() {
          container.innerHTML = '';
          document.getElementById('input' + index).value = '';
          document.getElementById('imgView' + index).style.display = 'none';
          document.getElementById('cropperContainer' + index).style.display = 'none';
          if (croppers[index]) {
            croppers[index].destroy();
            croppers[index] = null;
          }
          delete originalImages[index];
        };
        
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeBtn);
        container.appendChild(thumbnail);
      }
    }

    // Thumbnail handling
    function handleFileSelect(event, index) {
      const container = document.getElementById('addedImagesContainer' + index);
      container.innerHTML = '';
      
      if (event.target.files && event.target.files[0]) {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'thumbnail';
        
        const img = document.createElement('img');
        img.src = URL.createObjectURL(event.target.files[0]);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-thumbnail';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = function() {
          container.innerHTML = '';
          event.target.value = '';
          document.getElementById('imgView' + index).style.display = 'none';
          document.getElementById('cropperContainer' + index).style.display = 'none';
          if (croppers[index]) {
            croppers[index].destroy();
            croppers[index] = null;
          }
          delete originalImages[index];
        };
        
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeBtn);
        container.appendChild(thumbnail);
      }
    }

    // Rest of the code remains the same (form validation, etc.)
    // ...
    
    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      setupSaveButtons();
      
      // Form submission handler
      document.getElementById('productForm').addEventListener('submit', function(e) {
        if (!validateForm()) {
          e.preventDefault();
        }
      });
    });
  </script>
</body>
</html>



/////////////////////////////////////////////////////////////////////////////////////////////////////////

const Product = require('../../models/productsSchema');
const Category = require('../../models/categorySchema');
const Brand = require('../../models/brandSchema');
const sharp = require('sharp');
const path = require('path');

const getProductAddPage = async (req, res) => {
  try {
    const category = await Category.find({ isListed: true });
    const brand = await Brand.find({ isBlocked: false });
    res.render('product-add', {
      cat: category,
      brand: brand
    });
  } catch (error) {
    console.error('Error in getProductAddPage:', error);
    res.redirect('/pageerror');
  }
};

const addProducts = async (req, res) => {
  try {
    const products = req.body;

    const productExists = await Product.findOne({ productName: products.productName });

    if (!productExists) {
      const images = [];

      if (req.files && req.files.length > 0) {
        for (let i = 0; i < req.files.length; i++) {
          const originalImagePath = req.files[i].path;

          const resizedImagePath = path.join(__dirname, '../../public/uploads/product-images', req.files[i].filename);

          await sharp(originalImagePath)
            .resize({ width: 440, height: 440 })
            .toFile(resizedImagePath);

          images.push(req.files[i].filename); 
        }
      }

      const categoryDoc = await Category.findOne({ name: products.category });
      if (!categoryDoc) {
        return res.status(400).send('Invalid category name');
      }

      const newProduct = new Product({
        productName: products.productName,
        description: products.description,
        brand: products.brand,
        category: categoryDoc._id,
        regularPrice: products.regularPrice,
        salePrice: products.salePrice,
        createdOn: new Date(),
        quantity: products.quantity,
        size: products.size,
        color: products.color,
        productImage: images,
        status: 'Available'
      });

      await newProduct.save();
      return res.redirect('/admin/addProducts');
    } else {
      return res.status(400).json('Product already exists');
    }
  } catch (error) {
    console.error('Error saving product:', error);
    return res.redirect('/admin/pageerror');
  }
};

module.exports = {
  getProductAddPage,
  addProducts,
};
///////////////////////////////////////////////////////////////////////////////////////////////////////

router.get('/product-add',adminAuth,productController.getProductAddPage);
router.post('/addProducts',adminAuth,uploads.array('images',4),productController.addProducts);